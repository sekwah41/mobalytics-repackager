diff -uraN original/moba-desktop/src/app/app.js modified/moba-desktop/src/app/app.js
--- original/moba-desktop/src/app/app.js	2021-11-22 00:13:50.398491032 +0000
+++ modified/moba-desktop/src/app/app.js	2021-11-22 00:13:50.421824365 +0000
@@ -57,4 +57,4 @@
     });
 }
 exports.runApp = runApp;
-//# sourceMappingURL=app.js.map
\ No newline at end of file
+//# sourceMappingURL=app.js.map
diff -uraN original/moba-desktop/src/app/auto-update.js modified/moba-desktop/src/app/auto-update.js
--- original/moba-desktop/src/app/auto-update.js	2021-11-22 00:13:50.398491032 +0000
+++ modified/moba-desktop/src/app/auto-update.js	2021-11-22 00:13:50.421824365 +0000
@@ -21,9 +21,10 @@
 const RootStore_1 = require("../common/store/RootStore");
 const version_utils_1 = require("../utils/version.utils");
 function init() {
+    return;
     electron_updater_1.autoUpdater.autoDownload = false;
     electron_updater_1.autoUpdater.allowDowngrade = true;
-    electron_updater_1.autoUpdater.autoInstallOnAppQuit = true;
+    electron_updater_1.autoUpdater.autoInstallOnAppQuit = false;
     electron_updater_1.autoUpdater.logger = logs_1.appAutoUpdateLog;
     if (environment_1.IS_ELECTRON_DEV) {
         electron_updater_1.autoUpdater.channel = app_config_1.DESKTOP_DEV_UPDATE_CHANNEL;
@@ -53,7 +54,7 @@
         main_window_1.sendAppUpdateStatus(desktop_types_1.AppUpdateStatus.UPDATE_DOWNLOADED);
     });
     electron_updater_1.autoUpdater.on('error', err => {
-        main_window_1.sendAppUpdateStatus(desktop_types_1.AppUpdateStatus.ERROR);
+        //main_window_1.sendAppUpdateStatus(desktop_types_1.AppUpdateStatus.ERROR);
         logs_1.appAutoUpdateLog.error('Error: ', err);
     });
     setInterval(checkForUpdates, app_config_1.DESKTOP_APP_UPDATE_INTERVAL);
@@ -85,4 +86,4 @@
     electron_updater_1.autoUpdater.quitAndInstall();
 }
 exports.quitAndInstall = quitAndInstall;
-//# sourceMappingURL=auto-update.js.map
\ No newline at end of file
+//# sourceMappingURL=auto-update.js.map
diff -uraN original/moba-desktop/src/app/deep-linking.js modified/moba-desktop/src/app/deep-linking.js
--- original/moba-desktop/src/app/deep-linking.js	2021-11-22 00:13:50.398491032 +0000
+++ modified/moba-desktop/src/app/deep-linking.js	2021-11-22 00:13:50.421824365 +0000
@@ -34,8 +34,10 @@
 const ipc_messages_types_1 = require("../../../moba-web/src/common/types/desktop/ipc-messages.types");
 function initDeepLinking() {
     electron_1.app.removeAsDefaultProtocolClient(app_config_1.MOBA_PROTOCOL_NAME);
-    if (environment_1.IS_ELECTRON_DEV && environment_1.isWin) {
-        electron_1.app.setAsDefaultProtocolClient(app_config_1.MOBA_PROTOCOL_NAME, process.execPath, [path.resolve(process.argv[1])]);
+    if (process.defaultApp) {
+        if (process.argv.length >= 2) {
+            electron_1.app.setAsDefaultProtocolClient(app_config_1.MOBA_PROTOCOL_NAME, process.execPath, [path.resolve(process.argv[1])]);
+        }
     }
     else {
         electron_1.app.setAsDefaultProtocolClient(app_config_1.MOBA_PROTOCOL_NAME);
@@ -52,7 +54,7 @@
         main_window_1.showAndRestoreMainWindow();
     });
     electron_1.app.on('second-instance', (_e, argv) => {
-        if (environment_1.isWin) {
+        if (environment_1.isWin || environment_1.isLinux) {
             const url = argv.find(it => it.startsWith(`${app_config_1.MOBA_PROTOCOL_NAME}:`));
             url && processDeepLinkingUrl(url);
         }
@@ -84,4 +86,4 @@
         logs_1.appUrlsLog.error('Unknown moba protocol communication url: ', { url });
     }
 }
-//# sourceMappingURL=deep-linking.js.map
\ No newline at end of file
+//# sourceMappingURL=deep-linking.js.map
diff -uraN original/moba-desktop/src/app/ipc-protocol/app-update.ipc.js modified/moba-desktop/src/app/ipc-protocol/app-update.ipc.js
--- original/moba-desktop/src/app/ipc-protocol/app-update.ipc.js	2021-11-22 00:13:50.401824365 +0000
+++ modified/moba-desktop/src/app/ipc-protocol/app-update.ipc.js	2021-11-22 00:13:50.421824365 +0000
@@ -3,7 +3,6 @@
 exports.initAppUpdateIpc = void 0;
 const ipc_main_1 = require("../../utils/ipc-main");
 const ipc_messages_types_1 = require("../../../../moba-web/src/common/types/desktop/ipc-messages.types");
-const auto_update_1 = require("../auto-update");
 const game_overlay_manager_1 = require("../../game-overlay/game-overlay-manager");
 function initAppUpdateIpc() {
     ipc_main_1.ipcMainHandle(ipc_messages_types_1.IPC_MESSAGE.IS_UPDATE_AVAILABLE, () => auto_update_1.isUpdateAvailable());
@@ -17,4 +16,4 @@
     });
 }
 exports.initAppUpdateIpc = initAppUpdateIpc;
-//# sourceMappingURL=app-update.ipc.js.map
\ No newline at end of file
+//# sourceMappingURL=app-update.ipc.js.map
diff -uraN original/moba-desktop/src/app/ipc-protocol/ipc-protocol.js modified/moba-desktop/src/app/ipc-protocol/ipc-protocol.js
--- original/moba-desktop/src/app/ipc-protocol/ipc-protocol.js	2021-11-22 00:13:50.401824365 +0000
+++ modified/moba-desktop/src/app/ipc-protocol/ipc-protocol.js	2021-11-22 00:13:50.421824365 +0000
@@ -170,7 +170,7 @@
     }));
     ipc_main_1.ipcMainHandle(ipc_messages_types_1.IPC_MESSAGE.IS_TOBII_AVAILABLE, () => {
         return new Promise(resolve => {
-            if (environment_1.isWin) {
+            if (environment_1.isWin || environment_1.isLinux) {
                 const reader = new gaze_reader_process_1.GazeReaderProcess();
                 reader
                     .spawn(null)
@@ -197,7 +197,7 @@
     });
     ipc_main_1.ipcMainHandle(ipc_messages_types_1.IPC_MESSAGE.CHECK_TOBII_TRACKER_STATUS, () => {
         return new Promise(resolve => {
-            if (environment_1.isWin) {
+            if (environment_1.isWin || environment_1.isLinux) {
                 const reader = new gaze_reader_process_1.GazeReaderProcess();
                 reader
                     .spawn(null)
@@ -242,4 +242,4 @@
     app_settings_ipc_1.initAppSettingsIpc();
 }
 exports.init = init;
-//# sourceMappingURL=ipc-protocol.js.map
\ No newline at end of file
+//# sourceMappingURL=ipc-protocol.js.map
diff -uraN original/moba-desktop/src/common/api/connectors/graphql-request-client/graphql-connector.js modified/moba-desktop/src/common/api/connectors/graphql-request-client/graphql-connector.js
--- original/moba-desktop/src/common/api/connectors/graphql-request-client/graphql-connector.js	2021-11-22 00:13:50.398491032 +0000
+++ modified/moba-desktop/src/common/api/connectors/graphql-request-client/graphql-connector.js	2021-11-22 00:13:50.421824365 +0000
@@ -176,4 +176,4 @@
     }
 }
 exports.GraphqlConnector = GraphqlConnector;
-//# sourceMappingURL=graphql-connector.js.map
\ No newline at end of file
+//# sourceMappingURL=graphql-injection.js.map
diff -uraN original/moba-desktop/src/dialogs/select-game-folder-dialog.js modified/moba-desktop/src/dialogs/select-game-folder-dialog.js
--- original/moba-desktop/src/dialogs/select-game-folder-dialog.js	2021-11-22 00:13:50.398491032 +0000
+++ modified/moba-desktop/src/dialogs/select-game-folder-dialog.js	2021-11-22 00:13:50.421824365 +0000
@@ -11,18 +11,40 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.showSelectFolderDialog = void 0;
 const electron_1 = require("electron");
+const prompt = require('electron-prompt');
 const lcu_connection_1 = require("../utils/lcu-connection");
 const ipc_messages_types_1 = require("../../../moba-web/src/common/types/desktop/ipc-messages.types");
 function showSelectFolderDialog(window) {
     if (electron_1.remote) {
         return electron_1.remote.dialog
             .showOpenDialog(window, {
-            title: 'Choose the LoL installation path. e.g C:\\Riot Games\\League of Legends',
+            title: 'Choose the LoL installation path. e.g drive_c/Riot Games/League of Legends/ (click cancel if font is missing)',
             message: 'Choose the LoL installation path. e.g /Applications/League of Legends.app/',
             buttonLabel: 'Select Directory',
             properties: ['openDirectory', 'treatPackageAsDirectory', 'showHiddenFiles'],
-        })
-            .then((result) => __awaiter(this, void 0, void 0, function* () {
+        }).then(result => {
+            return new Promise((res, rej) => {
+                if(result.canceled) {
+                    prompt({
+                        title: 'Enter the LoL installation path',
+                        label: 'Path must be exact',
+                        value: '/drive_c/Riot Games/League of Legends/',
+                        inputAttrs: {
+                            type: 'text'
+                        },
+                        type: 'input'
+                    }, window).then((r) => {
+                        if(r === null) {
+                            res(result);
+                        } else {
+                            res({filePaths:[r]});
+                        }
+                    });
+                } else {
+                    res(result);
+                }
+            })
+        }).then((result) => __awaiter(this, void 0, void 0, function* () {
             if (!result.canceled) {
                 const folder = result.filePaths ? result.filePaths[0] : null;
                 const isValid = yield lcu_connection_1.isValidLCUPath(folder);
@@ -46,4 +68,4 @@
     }
 }
 exports.showSelectFolderDialog = showSelectFolderDialog;
-//# sourceMappingURL=select-game-folder-dialog.js.map
\ No newline at end of file
+//# sourceMappingURL=select-game-folder-dialog.js.map
diff -uraN original/moba-desktop/src/game-overlay/game-overlay-manager.js modified/moba-desktop/src/game-overlay/game-overlay-manager.js
--- original/moba-desktop/src/game-overlay/game-overlay-manager.js	2021-11-22 00:13:50.398491032 +0000
+++ modified/moba-desktop/src/game-overlay/game-overlay-manager.js	2021-11-22 00:13:50.421824365 +0000
@@ -16,7 +16,7 @@
 const mac_overlay_provider_1 = require("./overlay-provider/mac-overlay-provider");
 const win_overlay_provider_1 = require("./overlay-provider/win-overlay-provider");
 const mac_overlay_injector_1 = require("./overlay-injector/mac-overlay-injector");
-const win_overlay_injector_1 = require("./overlay-injector/win-overlay-injector");
+const win_overlay_injector_1 = require("./overlay-injector/lin-overlay-injector");
 const win_overlay_server_1 = require("./overlay-server/win-overlay-server");
 const mac_overlay_server_1 = require("./overlay-server/mac-overlay-server");
 const game_overlay_types_1 = require("../../../moba-web/src/common/types/game-overlay.types");
@@ -81,6 +81,7 @@
             processedEvent && window.sendInputEvent(processedEvent);
         };
         this.onResize = (event, windowId) => {
+            console.log("Resize overlay");
             const window = windowId && this.getOverlayWindow(windowId);
             if (!window) {
                 return;
@@ -104,18 +105,18 @@
             window.resize({ width, height });
         };
         this.createOverlayInjector = () => {
-            const OverlayInjector = environment_1.isWin ? win_overlay_injector_1.WinOverlayInjector : mac_overlay_injector_1.MacOverlayInjector;
+            const OverlayInjector = environment_1.isLinux ? win_overlay_injector_1.WinOverlayInjector : mac_overlay_injector_1.MacOverlayInjector;
             const injector = new OverlayInjector();
             this.overlayInjector = injector;
             return injector;
         };
         this.createOverlayServer = () => {
-            return environment_1.isWin
+            return environment_1.isLinux
                 ? new win_overlay_server_1.WinOverlayServer(win_overlay_provider_1.WinOverlayProvider.getInstance())
                 : new mac_overlay_server_1.MacOverlayServer(mac_overlay_provider_1.MacOverlayProvider.getInstance());
         };
         this.createOverlayProvider = () => {
-            return environment_1.isWin ? win_overlay_provider_1.WinOverlayProvider.getInstance() : mac_overlay_provider_1.MacOverlayProvider.getInstance();
+            return environment_1.isLinux ? win_overlay_provider_1.WinOverlayProvider.getInstance() : mac_overlay_provider_1.MacOverlayProvider.getInstance();
         };
         this.getSpecificOverlayWindowSettings = (windowId) => __awaiter(this, void 0, void 0, function* () {
             const settings = { scaleFactor: this.scaleFactor };
@@ -168,6 +169,7 @@
             return this.overlayWindows;
         };
         this.ensureOverlayWindow = (windowId) => __awaiter(this, void 0, void 0, function* () {
+            console.log("Ensure overlay window", windowId);
             let window = this.getOverlayWindow(windowId);
             if (!window) {
                 window = yield this.createOverlayWindow(windowId);
@@ -203,6 +205,7 @@
             if (!canStart)
                 return;
             this.ensureOverlayServer();
+            console.log("Run injectory boi");
             logs_1.gameOverlayLog.debug(`Game overlay manager | starting overlay for - ${game_overlay_1.getOverlayWindowName(windowId)}`);
             this.startInjector()
                 .then(() => this.ensureOverlayWindow(windowId))
@@ -210,7 +213,7 @@
         });
         this.stop = (windowId) => {
             const injector = this.getOverlayInjector();
-            if (injector && environment_1.isWin) {
+            if (injector && environment_1.isLinux) {
                 injector.stop();
                 logs_1.gameOverlayLog.debug(`Game overlay manager | injector for ${game_overlay_1.getOverlayWindowName(windowId)} was stopped`);
             }
@@ -251,4 +254,4 @@
     }
     return GameOverlayManager.instance;
 };
-//# sourceMappingURL=game-overlay-manager.js.map
\ No newline at end of file
+//# sourceMappingURL=game-overlay-manager.js.map
diff -uraN original/moba-desktop/src/game-overlay/league-helper.js modified/moba-desktop/src/game-overlay/league-helper.js
--- original/moba-desktop/src/game-overlay/league-helper.js	1970-01-01 01:00:00.000000000 +0100
+++ modified/moba-desktop/src/game-overlay/league-helper.js	2021-11-22 00:14:56.788488559 +0000
@@ -0,0 +1,54 @@
+const child_process_1 = require("child_process");
+const process_utils_1 = require("../utils/process.utils");
+const fs = require("fs");
+const portfinder = require('portfinder');
+
+const portTracker = {
+    CLIENT: -1,
+    CONTROLLER: -1,
+}
+module.exports = {
+    getLeagueEnvVariables: ()  => {
+        return new Promise((resolve,reject) => {
+            child_process_1.exec("ps -ax | grep -v grep | grep wine | grep LeagueClient.exe", (err, stdout) => {
+                if(err) {
+                    process_utils_1.log("Could not find wine start process");
+                    reject();
+                    return;
+                }
+                try {
+                    const processId = /([0-9])+/.exec(stdout);
+                    if(processId) {
+                        process_utils_1.log(`Reading /proc/${processId[0]}/environ`);
+                        const envVariables = fs.readFileSync(`/proc/${processId[0]}/environ`).toString('utf8').split('\0').map(value => {
+                            const indexOf = value.indexOf('=');
+                            return [value.slice(0,indexOf), value.slice(indexOf + 1)];
+                        });
+                        const leagueEnv = {};
+                        envVariables.forEach(value => {
+                            if(value[0].length > 0) {
+                                leagueEnv[value[0]] = value[1];
+                            }
+                        });
+                        resolve(leagueEnv);
+                        return;
+                    } else {
+                        process_utils_1.log("Could not find wine start process");
+                    }
+                    reject();
+                } catch(e) {
+                    reject();
+                }
+            });
+        });
+    },
+    getPort: () => portfinder.getPortPromise,
+    getUsedPorts: () => {
+        return portTracker;
+    },
+    createNewPorts: async () => {
+        portTracker.SERVER = await portfinder.getPortPromise();
+        portTracker.CONTROLLER = await portfinder.getPortPromise();
+        return portTracker;
+    }
+}
diff -uraN original/moba-desktop/src/game-overlay/overlay-injector/lin-overlay-injector.js modified/moba-desktop/src/game-overlay/overlay-injector/lin-overlay-injector.js
--- original/moba-desktop/src/game-overlay/overlay-injector/lin-overlay-injector.js	1970-01-01 01:00:00.000000000 +0100
+++ modified/moba-desktop/src/game-overlay/overlay-injector/lin-overlay-injector.js	2021-11-22 00:13:50.425157698 +0000
@@ -0,0 +1,176 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.WinOverlayInjector = void 0;
+const child_process_1 = require("child_process");
+const path_1 = __importDefault(require("path"));
+const net_1 = __importDefault(require("net"));
+const paths_1 = require("../../paths");
+const base_overlay_injector_1 = require("./base-overlay-injector");
+const promise_with_retry_1 = require("../../../../moba-web/src/common/utils/promise-with-retry");
+const process_utils_1 = require("../../utils/process.utils");
+const fs = require('fs');
+const path = require('path');
+const { getLeagueEnvVariables, createNewPorts } = require("../league-helper");
+
+const INJECTION_CONNECTOR_NAME = "injection-connector.exe";
+
+function setupInjectionConnector(port) {
+    try {
+        console.log("Connector controller | Creating connection on port: ", port.CONTROLLER);
+        const connection = net_1.default.createConnection({ port: port.CONTROLLER }, () => {
+            console.log("Connector controller | Connected to controller");
+        });
+        connection.on('data', (data) => {
+            console.log(`Connector controller | ${data}`);
+        });
+        connection.on('end', () => {
+            console.log('Connector controller | disconnected from server');
+        });
+        connection.on('error', (err) =>{
+            console.log('Connector controller | error', err);
+        });
+    } catch (e) {
+        console.log("Problems", e);
+    }
+
+    try {
+        console.log("Overlay injection connector | Connecting to port: ", port.SERVER);
+        const server_connection = net_1.default.createConnection({ port: port.SERVER }, () => {
+            console.log("Connector server proxy | Connected to server_port");
+        });
+        const server_connection_unix = net_1.default.createConnection({ path: '/tmp/MOBA-OVERLAY-SERVER' }, () => {
+            console.log("Connector server proxy | Connected to server_unix");
+        });
+        server_connection.on('data', (data) => {
+            server_connection_unix.write(data);
+        });
+        server_connection.on('end', () => {
+            server_connection_unix.end();
+            console.log('Connector server proxy | disconnected from server');
+        });
+        server_connection.on('error', (err) =>{
+            console.log('Connector server proxy | error', err);
+        });
+    } catch (e) {
+        console.log("Problems", e);
+    }
+}
+
+/**
+ * Modified to run for linux
+ */
+class WinOverlayInjector extends base_overlay_injector_1.BaseOverlayInjector {
+    constructor() {
+        process_utils_1.log("Overlay injector working dir", paths_1.OVERLAY_INJECTOR_WIN_WORKING_DIR);
+        process_utils_1.log("Overlay injector config name", paths_1.OVERLAY_INJECTOR_CONFIG_NAME);
+        super(paths_1.OVERLAY_INJECTOR_WIN_WORKING_DIR, paths_1.OVERLAY_INJECTOR_CONFIG_NAME);
+        this.injectionConnectorExe = path.join(paths_1.OVERLAY_INJECTOR_WIN_WORKING_DIR, INJECTION_CONNECTOR_NAME);
+        if(fs.existsSync(this.injectionConnectorExe)) fs.rmSync(this.injectionConnectorExe);
+        fs.copyFileSync(path.join(process.resourcesPath, "app", INJECTION_CONNECTOR_NAME), this.injectionConnectorExe);
+        this.startInternal = async () => {
+            const ports = await createNewPorts();
+            const pathToInjector = path_1.default.join(paths_1.OVERLAY_INJECTOR_WIN_WORKING_DIR, `${paths_1.OVERLAY_INJECTOR_FILE_NAME}.exe`);
+            process_utils_1.log(`start overlay injector: ${pathToInjector}`);
+            console.log("Trying to start:", pathToInjector);
+            const leagueVariables = await getLeagueEnvVariables();
+
+            console.log("Starting connector:", `${leagueVariables.WINE} ${INJECTION_CONNECTOR_NAME}`);
+            /*child_process_1.exec(`${leagueVariables.WINE} taskmgr`, {
+                env: {
+                    ...leagueVariables
+                }
+            }, (err, stdout) => {
+
+            });*/
+
+            const injectConnCommand = `${leagueVariables.WINE} ${INJECTION_CONNECTOR_NAME}`;
+            process_utils_1.log(`starting injection connector: ${injectConnCommand}`);
+            this.process = child_process_1.spawn(injectConnCommand, {
+                shell: true,
+                stdio: ['inherit', 'inherit', 'inherit'],
+                cwd: paths_1.OVERLAY_INJECTOR_WIN_WORKING_DIR,
+                env: {
+                    ...leagueVariables,
+                    OVERLAY_DIR: paths_1.OVERLAY_INJECTOR_WIN_WORKING_DIR,
+                    NODE_SKIP_PLATFORM_CHECK: "1",
+                    WINEDEBUG: "-all",
+                    OVERLAY_CONTROLLER: ports.CONTROLLER,
+                    OVERLAY_SERVER: ports.SERVER,
+                }
+            });
+            this.process.on('close', (code, signal) => {
+                process_utils_1.log(`was closed, code: ${code}, signal: ${signal}`);
+            });
+            this.process.on('error', (err) => {
+                process_utils_1.log(`error: ${err}`);
+            });
+            this.process.on('exit', (code, signal) => {
+                process_utils_1.log(`exit, code: ${code}, signal: ${signal}`);
+            });
+            this.process.on('message', (message) => {
+                process_utils_1.log(`exit, message: ${message}`);
+            });
+            this.process.on('spawn', (message) => {
+                process_utils_1.log(`overlay connector injector spawned`, {message});
+            });
+            promise_with_retry_1.promiseWithRetry(() => process_utils_1.checkIsProcessRunning(paths_1.OVERLAY_INJECTOR_FILE_NAME, paths_1.OVERLAY_INJECTOR_WIN_PROGRAM_GREP_STR), 500, result => !!result)
+                .then(isRunning => {
+                    if (isRunning) {
+                        process_utils_1.log(`Overlay injector successfully started`);
+                        setupInjectionConnector(ports);
+                    } else {
+                        process_utils_1.log(`Overlay injector didn't start`, undefined, 'error');
+                    }
+                })
+                .catch(reason => process_utils_1.log(`Checking if the process was started failed.`, {reason}, 'error'));
+        };
+        this.isRunning = () => {
+            return process_utils_1.checkIsProcessRunning(paths_1.OVERLAY_INJECTOR_FILE_NAME, paths_1.OVERLAY_INJECTOR_WIN_PROGRAM_GREP_STR);
+        };
+    }
+    start() {
+        return super
+            .start()
+            .then(this.validateConfig)
+            .then(this.isRunning)
+            .then(isInjectorRunning => {
+            if (!isInjectorRunning) {
+                this.startInternal();
+            }
+            else {
+                process_utils_1.log(`the process has already started`);
+            }
+            this.status = base_overlay_injector_1.InjectorStatus.STARTED;
+            return Promise.resolve(true);
+        }, err => {
+            this.status = base_overlay_injector_1.InjectorStatus.INIT;
+            process_utils_1.log(`checking whether the process is running ended with an error: ${err}`);
+            return Promise.reject(err);
+        });
+    }
+    stop() {
+        return super
+            .stop()
+            .then(() => {
+            if (!this.process) {
+                if (!this.process)
+                    process_utils_1.log(`Cannot stop - process not found`);
+                return true;
+            }
+            this.process.kill();
+            this.process = null;
+            this.status = base_overlay_injector_1.InjectorStatus.STOPPED;
+            process_utils_1.log(`stopped`);
+            return true;
+        })
+            .catch(error => {
+            process_utils_1.log(`Couldn't stop overlay injector`, { error }, 'error');
+            return false;
+        });
+    }
+}
+exports.WinOverlayInjector = WinOverlayInjector;
+//# sourceMappingURL=win-overlay-injector.js.map
diff -uraN original/moba-desktop/src/game-overlay/overlay-injector/win-overlay-injector.js modified/moba-desktop/src/game-overlay/overlay-injector/win-overlay-injector.js
--- original/moba-desktop/src/game-overlay/overlay-injector/win-overlay-injector.js	2021-11-22 00:13:50.398491032 +0000
+++ modified/moba-desktop/src/game-overlay/overlay-injector/win-overlay-injector.js	2021-11-22 00:13:50.425157698 +0000
@@ -69,13 +69,13 @@
             });
             promise_with_retry_1.promiseWithRetry(() => process_utils_1.checkIsProcessRunning(paths_1.OVERLAY_INJECTOR_FILE_NAME, paths_1.OVERLAY_INJECTOR_WIN_PROGRAM_GREP_STR), 500, result => !!result)
                 .then(isRunning => {
-                if (isRunning) {
-                    process_utils_1.log(`Overlay injector successfully started`);
-                }
-                else {
-                    process_utils_1.log(`Overlay injector didn't start`, undefined, 'error');
-                }
-            })
+                    if (isRunning) {
+                        process_utils_1.log(`Overlay injector successfully started`);
+                    }
+                    else {
+                        process_utils_1.log(`Overlay injector didn't start`, undefined, 'error');
+                    }
+                })
                 .catch(reason => process_utils_1.log(`Checking if the process was started failed.`, { reason }, 'error'));
         };
         this.isRunning = () => {
@@ -88,40 +88,40 @@
             .then(this.validateConfig)
             .then(this.isRunning)
             .then(isInjectorRunning => {
-            if (!isInjectorRunning) {
-                this.startInternal();
-            }
-            else {
-                process_utils_1.log(`the process has already started`);
-            }
-            this.status = base_overlay_injector_1.InjectorStatus.STARTED;
-            return Promise.resolve(true);
-        }, err => {
-            this.status = base_overlay_injector_1.InjectorStatus.INIT;
-            process_utils_1.log(`checking whether the process is running ended with an error: ${err}`);
-            return Promise.reject(err);
-        });
+                if (!isInjectorRunning) {
+                    this.startInternal();
+                }
+                else {
+                    process_utils_1.log(`the process has already started`);
+                }
+                this.status = base_overlay_injector_1.InjectorStatus.STARTED;
+                return Promise.resolve(true);
+            }, err => {
+                this.status = base_overlay_injector_1.InjectorStatus.INIT;
+                process_utils_1.log(`checking whether the process is running ended with an error: ${err}`);
+                return Promise.reject(err);
+            });
     }
     stop() {
         return super
             .stop()
             .then(() => {
-            if (!this.process) {
-                if (!this.process)
-                    process_utils_1.log(`Cannot stop - process not found`);
+                if (!this.process) {
+                    if (!this.process)
+                        process_utils_1.log(`Cannot stop - process not found`);
+                    return true;
+                }
+                this.process.kill();
+                this.process = null;
+                this.status = base_overlay_injector_1.InjectorStatus.STOPPED;
+                process_utils_1.log(`stopped`);
                 return true;
-            }
-            this.process.kill();
-            this.process = null;
-            this.status = base_overlay_injector_1.InjectorStatus.STOPPED;
-            process_utils_1.log(`stopped`);
-            return true;
-        })
+            })
             .catch(error => {
-            process_utils_1.log(`Couldn't stop overlay injector`, { error }, 'error');
-            return false;
-        });
+                process_utils_1.log(`Couldn't stop overlay injector`, { error }, 'error');
+                return false;
+            });
     }
 }
 exports.WinOverlayInjector = WinOverlayInjector;
-//# sourceMappingURL=win-overlay-injector.js.map
\ No newline at end of file
+//# sourceMappingURL=win-overlay-injector.js.map
diff -uraN original/moba-desktop/src/game-overlay/overlay-provider/base-overlay-provider.js modified/moba-desktop/src/game-overlay/overlay-provider/base-overlay-provider.js
--- original/moba-desktop/src/game-overlay/overlay-provider/base-overlay-provider.js	2021-11-22 00:13:50.398491032 +0000
+++ modified/moba-desktop/src/game-overlay/overlay-provider/base-overlay-provider.js	2021-11-22 00:13:50.425157698 +0000
@@ -22,6 +22,7 @@
 class BaseOverlayProvider extends events_1.EventEmitter {
     constructor() {
         super();
+
         this.builder = new flatbuffers_1.flatbuffers.Builder(1024);
         this.debugInputEvents = [
             game_overlay_server_types_1.TranslatedEventType.KEY_UP,
@@ -59,13 +60,13 @@
         };
         logs_1.gameOverlayLog.debug(`------------ init Overlay Provider------------`);
     }
-    init() {
+    async init() {
         try {
-            logs_1.gameOverlayLog.debug(`Overlay provider | try to require provider`);
-            this.provider = require(paths_1.OVERLAY_MODULE_PATH);
-            logs_1.gameOverlayLog.debug(`Overlay provider | provider required`, { provider: this.provider });
-        }
-        catch (error) {
+            this.provider = require("./overlay_provider_replacement");
+            //this.provider = require(paths_1.OVERLAY_MODULE_PATH);
+            logs_1.gameOverlayLog.debug(`Overlay provider | provider required`, {provider: this.provider});
+        } catch (error) {
+            console.log(error);
             logs_1.gameOverlayLog.error("Overlay provider | occurred error while trying to require overlay's provider. ", {
                 error,
                 path: paths_1.OVERLAY_MODULE_PATH,
@@ -80,8 +81,7 @@
         try {
             logs_1.gameOverlayLog.debug(`Overlay provider | try to start provider`);
             this.provider.start();
-        }
-        catch (error) {
+        } catch (error) {
             logs_1.gameOverlayLog.error("Overlay provider | occurred error while trying to start overlay's provider. ", {
                 error,
                 path: paths_1.OVERLAY_MODULE_PATH,
@@ -150,4 +150,4 @@
     }
 }
 exports.BaseOverlayProvider = BaseOverlayProvider;
-//# sourceMappingURL=base-overlay-provider.js.map
\ No newline at end of file
+//# sourceMappingURL=base-overlay-provider.js.map
diff -uraN original/moba-desktop/src/game-overlay/overlay-provider/overlay_provider_replacement.js modified/moba-desktop/src/game-overlay/overlay-provider/overlay_provider_replacement.js
--- original/moba-desktop/src/game-overlay/overlay-provider/overlay_provider_replacement.js	1970-01-01 01:00:00.000000000 +0100
+++ modified/moba-desktop/src/game-overlay/overlay-provider/overlay_provider_replacement.js	2021-11-22 00:13:50.425157698 +0000
@@ -0,0 +1,128 @@
+const fetch = require('node-fetch');
+const logs_1 = require("../../utils/logs");
+const {getLeagueEnvVariables, getPort} = require("../league-helper");
+const process_utils_1 = require("../../utils/process.utils");
+const child_process_1 = require("child_process");
+const path = require("path");
+const paths_1 = require("../../paths");
+const fs = require("fs");
+
+let providerPort = (async function setup() {
+    const hostPort = await getPort();
+
+    const OVERLAY_PROVIDER_NAME = path.join("overlay-provider.exe");
+    const overlayConnectorDir = path.join(paths_1.OVERLAY_MODULE_WIN_PATH, "../");
+    const overlayConnectorExe = path.join(overlayConnectorDir, OVERLAY_PROVIDER_NAME);
+    if (fs.existsSync(overlayConnectorExe)) fs.rmSync(overlayConnectorExe);
+    fs.copyFileSync(path.join(process.resourcesPath, "app", OVERLAY_PROVIDER_NAME), overlayConnectorExe);
+    logs_1.gameOverlayLog.debug(`Overlay provider | try to require provider`);
+    const leagueVariables = await getLeagueEnvVariables();
+    const overlayCommand = `${leagueVariables.WINE} ${OVERLAY_PROVIDER_NAME}`;
+    process_utils_1.log(`starting overlay connector: ${overlayCommand} in dir: ${overlayConnectorDir}`);
+    const child = child_process_1.spawn(overlayCommand, {
+        shell: true,
+        stdio: ['inherit', 'inherit', 'inherit'],
+        cwd: overlayConnectorDir,
+        env: {
+            ...leagueVariables,
+            OVERLAY_DIR: overlayConnectorDir,
+            NODE_SKIP_PLATFORM_CHECK: "1",
+            PORT: hostPort,
+        }
+    });
+    child.on('close', (code, signal) => {
+        process_utils_1.log(`provider was closed, code: ${code}, signal: ${signal}`);
+    });
+    child.on('error', (err) => {
+        process_utils_1.log(`provider error: ${err}`);
+    });
+    child.on('exit', (code, signal) => {
+        process_utils_1.log(`provider exit, code: ${code}, signal: ${signal}`);
+    });
+    child.on('message', (message) => {
+        process_utils_1.log(`provider exit, message: ${message}`);
+    });
+    child.on('spawn', (message) => {
+        process_utils_1.log(`overlay provider spawned`, {message});
+    });
+
+    await new Promise((resolve) => {
+        setTimeout(() => {
+            // TODO more reliable way to check if the service is running.
+            resolve();
+        }, 5000);
+    });
+
+    return hostPort;
+})();
+
+
+async function callEndpoint(path, ...args) {
+    // TODO queue requests until provider is ready
+    const hostPort = await providerPort;
+    const urlPath = `http://localhost:${hostPort}/${path}`;
+    process_utils_1.log(`Calling ${urlPath} with ${args}`);
+    try {
+        const response = await fetch(urlPath, {
+            method: "POST",
+            headers: {
+                "Content-Type": "application/json"
+            },
+            body: JSON.stringify({
+                args
+            })
+        });
+        const json = await response.json();
+        if(json.result === "empty") {
+            return undefined;
+        } else {
+            return json;
+        }
+    } catch(e) {
+        console.log("Error connecting", e);
+        return null;
+    }
+
+}
+
+/*console.log("Try to get functions");
+setInterval(async () => {
+    try {
+        await callEndpoint("getLoLPlayerLiveData");
+    } catch (e) {
+        console.log("problem", e);
+    }
+}, 4000);*/
+
+module.exports = {
+    start: async (...args) => {
+        return await callEndpoint("start", args);
+    },
+    stop: async (...args) => {
+        return await callEndpoint("stop", args);
+    },
+    addWindow: async (...args) => {
+        return await callEndpoint("console", args);
+    },
+    deleteWindow: async (...args) => {
+        return await callEndpoint("deleteWindow", args);
+    },
+    prepareFrameBuffer: async (...args) => {
+        return await callEndpoint("prepareFrameBuffer", args);
+    },
+    translateInputEvent: async (...args) => {
+        return await callEndpoint("translateInputEvent", args);
+    },
+    getCodeForKey: async (...args) => {
+        return await callEndpoint("getCodeForKey", args);
+    },
+    initMemoryScannerForLoL: async (...args) => {
+        return await callEndpoint("initMemoryScannerForLoL", args);
+    },
+    getMemoryScannerForLoLStatus: async (...args) => {
+        return await callEndpoint("getMemoryScannerForLoLStatus", args);
+    },
+    getLoLPlayerLiveData: async (...args) => {
+        return await callEndpoint("getLoLPlayerLiveData", args);
+    },
+};
diff -uraN original/moba-desktop/src/game-overlay/overlay-provider/win-overlay-provider.js modified/moba-desktop/src/game-overlay/overlay-provider/win-overlay-provider.js
--- original/moba-desktop/src/game-overlay/overlay-provider/win-overlay-provider.js	2021-11-22 00:13:50.398491032 +0000
+++ modified/moba-desktop/src/game-overlay/overlay-provider/win-overlay-provider.js	2021-11-22 00:13:50.425157698 +0000
@@ -5,17 +5,17 @@
 class WinOverlayProvider extends base_overlay_provider_1.BaseOverlayProvider {
     constructor() {
         super();
-        this.initLolMemoryScanner = () => {
+        this.initLolMemoryScanner = async () => {
             var _a;
-            return (_a = this.provider) === null || _a === void 0 ? void 0 : _a.initMemoryScannerForLoL();
+            return (_a = this.provider) === null || _a === void 0 ? void 0 : await _a.initMemoryScannerForLoL();
         };
-        this.getLolMemoryScannerInfo = () => {
+        this.getLolMemoryScannerInfo = async () => {
             var _a;
-            return (_a = this.provider) === null || _a === void 0 ? void 0 : _a.getMemoryScannerForLoLStatus();
+            return (_a = this.provider) === null || _a === void 0 ? void 0 : await _a.getMemoryScannerForLoLStatus();
         };
-        this.getLolMemoryScannerPlayerData = () => {
+        this.getLolMemoryScannerPlayerData = async () => {
             var _a;
-            return (_a = this.provider) === null || _a === void 0 ? void 0 : _a.getLoLPlayerLiveData();
+            return (_a = this.provider) === null || _a === void 0 ? void 0 : await _a.getLoLPlayerLiveData();
         };
         this.init();
     }
@@ -28,4 +28,4 @@
     }
     return WinOverlayProvider.instance;
 };
-//# sourceMappingURL=win-overlay-provider.js.map
\ No newline at end of file
+//# sourceMappingURL=win-overlay-provider.js.map
diff -uraN original/moba-desktop/src/game-overlay/overlay-server/base-overlay-server.js modified/moba-desktop/src/game-overlay/overlay-server/base-overlay-server.js
--- original/moba-desktop/src/game-overlay/overlay-server/base-overlay-server.js	2021-11-22 00:13:50.398491032 +0000
+++ modified/moba-desktop/src/game-overlay/overlay-server/base-overlay-server.js	2021-11-22 00:13:50.425157698 +0000
@@ -27,7 +27,7 @@
             switch (windowId) {
                 case game_overlay_types_1.OverlayWindowId.LOL:
                 case game_overlay_types_1.OverlayWindowId.TFT:
-                    return environment_1.isWin ? game_overlay_server_types_1.AppName.WIN_LOL : game_overlay_server_types_1.AppName.LOL;
+                    return environment_1.isLinux ? game_overlay_server_types_1.AppName.WIN_LOL : game_overlay_server_types_1.AppName.LOL;
                 default:
                     return null;
             }
@@ -48,6 +48,7 @@
                 return;
             }
             const pid = this.apps.get(appName);
+            console.log("PID", pid);
             if (!lang_1.isDef(pid)) {
                 logs_1.gameOverlayLog.warn(`Overlay server | connection for client: ${appName} is missing - the process pid is missing`);
                 return;
@@ -82,6 +83,7 @@
             });
         };
         this.checkServerConnections = () => {
+            console.log("Check server connections");
             return new Promise(resolve => {
                 var _a;
                 (_a = this.server) === null || _a === void 0 ? void 0 : _a.getConnections((err, count) => {
@@ -259,4 +261,4 @@
     }
 }
 exports.BaseOverlayServer = BaseOverlayServer;
-//# sourceMappingURL=base-overlay-server.js.map
\ No newline at end of file
+//# sourceMappingURL=base-overlay-server.js.map
diff -uraN original/moba-desktop/src/game-overlay/overlay-server/win-overlay-server.js modified/moba-desktop/src/game-overlay/overlay-server/win-overlay-server.js
--- original/moba-desktop/src/game-overlay/overlay-server/win-overlay-server.js	2021-11-22 00:13:50.398491032 +0000
+++ modified/moba-desktop/src/game-overlay/overlay-server/win-overlay-server.js	2021-11-22 00:13:50.425157698 +0000
@@ -2,12 +2,31 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.WinOverlayServer = void 0;
 const base_overlay_server_1 = require("./base-overlay-server");
-const CLIENT_PATH = '\\\\.\\pipe\\MOBA-OVERLAY-CLIENT-';
-const SERVER_PATH = '\\\\.\\pipe\\MOBA-OVERLAY-SERVER';
+const logs_1 = require("../../utils/logs");
+const fs_1 = __importDefault(require("fs"));
+//const CLIENT_PATH = '\\\\.\\pipe\\MOBA-OVERLAY-CLIENT-';
+//const SERVER_PATH = '\\\\.\\pipe\\MOBA-OVERLAY-SERVER';
+const CLIENT_PATH = '/tmp/MOBA-OVERLAY-CLIENT-';
+const SERVER_PATH = '/tmp/MOBA-OVERLAY-SERVER';
 class WinOverlayServer extends base_overlay_server_1.BaseOverlayServer {
     constructor(overlayProvider) {
         super(CLIENT_PATH, SERVER_PATH, overlayProvider);
+        console.log("Overlay server", CLIENT_PATH, SERVER_PATH);
+    }
+    start() {
+        logs_1.gameOverlayLog.debug(`Overlay server | starting server creation for Linux, server path: ${this.SERVER_PATH}`);
+        if (!this.shouldStart()) {
+            logs_1.gameOverlayLog.debug('Overlay server | server is busy, try to start later');
+            return;
+        }
+        try {
+            fs_1.default.unlinkSync(this.SERVER_PATH);
+        }
+        catch (error) {
+            logs_1.gameOverlayLog.error('Overlay server | unlink server path error', { error });
+        }
+        super.start();
     }
 }
 exports.WinOverlayServer = WinOverlayServer;
-//# sourceMappingURL=win-overlay-server.js.map
\ No newline at end of file
+//# sourceMappingURL=win-overlay-server.js.map
diff -uraN original/moba-desktop/src/game-overlay/overlay-window/base-overlay-window.js modified/moba-desktop/src/game-overlay/overlay-window/base-overlay-window.js
--- original/moba-desktop/src/game-overlay/overlay-window/base-overlay-window.js	2021-11-22 00:13:50.398491032 +0000
+++ modified/moba-desktop/src/game-overlay/overlay-window/base-overlay-window.js	2021-11-22 00:13:50.425157698 +0000
@@ -277,4 +277,4 @@
     }
 }
 exports.BaseOverlayWindow = BaseOverlayWindow;
-//# sourceMappingURL=base-overlay-window.js.map
\ No newline at end of file
+//# sourceMappingURL=base-overlay-window.js.map
diff -uraN original/moba-desktop/src/game-overlay/overlay-window/lol-overlay-window.js modified/moba-desktop/src/game-overlay/overlay-window/lol-overlay-window.js
--- original/moba-desktop/src/game-overlay/overlay-window/lol-overlay-window.js	2021-11-22 00:13:50.398491032 +0000
+++ modified/moba-desktop/src/game-overlay/overlay-window/lol-overlay-window.js	2021-11-22 00:13:50.425157698 +0000
@@ -121,4 +121,4 @@
     }
 }
 exports.LolOverlayWindow = LolOverlayWindow;
-//# sourceMappingURL=lol-overlay-window.js.map
\ No newline at end of file
+//# sourceMappingURL=lol-overlay-window.js.map
diff -uraN original/moba-desktop/src/gaze-reader/gaze-reader-game-processor.js modified/moba-desktop/src/gaze-reader/gaze-reader-game-processor.js
--- original/moba-desktop/src/gaze-reader/gaze-reader-game-processor.js	2021-11-22 00:13:50.398491032 +0000
+++ modified/moba-desktop/src/gaze-reader/gaze-reader-game-processor.js	2021-11-22 00:13:50.425157698 +0000
@@ -26,7 +26,7 @@
         this.reader = null;
         this.gamesInfoMap = null;
         this.gameStarted = (gameId, summoner, qType) => {
-            if (!environment_1.isWin)
+            if (!(environment_1.isWin || environment_1.isLinux))
                 return;
             if (!app_settings_1.getAppSettings().isTobiiEyeTrackerEnabled())
                 return;
@@ -42,7 +42,7 @@
             });
         };
         this.gameFinished = (gameId) => {
-            if (!environment_1.isWin)
+            if (!(environment_1.isWin || environment_1.isLinux))
                 return;
             if (!app_settings_1.getAppSettings().isTobiiEyeTrackerEnabled())
                 return;
@@ -202,4 +202,4 @@
 }
 exports.GazeReaderGameProcessor = GazeReaderGameProcessor;
 GazeReaderGameProcessor.instance = null;
-//# sourceMappingURL=gaze-reader-game-processor.js.map
\ No newline at end of file
+//# sourceMappingURL=gaze-reader-game-processor.js.map
diff -uraN original/moba-desktop/src/gaze-reader/gaze-reader-process.js modified/moba-desktop/src/gaze-reader/gaze-reader-process.js
--- original/moba-desktop/src/gaze-reader/gaze-reader-process.js	2021-11-22 00:13:50.398491032 +0000
+++ modified/moba-desktop/src/gaze-reader/gaze-reader-process.js	2021-11-22 00:13:50.425157698 +0000
@@ -15,7 +15,7 @@
         this.spawn = (targetPath) => {
             var _a, _b;
             logs_1.gazeReaderLog.debug(`Spawn ${paths_1.TOBII_BINARY_LOCAL_PATH}, pid: ${(_a = this.readerProcess) === null || _a === void 0 ? void 0 : _a.pid}`);
-            if (!environment_1.isWin)
+            if ( !(environment_1.isWin|| environment_1.isLinux))
                 return Promise.reject();
             if (this.readerProcess) {
                 logs_1.gazeReaderLog.error(`Already spawned, pid: ${(_b = this.readerProcess) === null || _b === void 0 ? void 0 : _b.pid}`);
@@ -56,7 +56,7 @@
         this.kill = () => {
             var _a, _b;
             logs_1.gazeReaderLog.debug(`Kill, pid: ${(_a = this.readerProcess) === null || _a === void 0 ? void 0 : _a.pid}`);
-            if (!environment_1.isWin)
+            if ( !(environment_1.isWin|| environment_1.isLinux))
                 return;
             if (!this.readerProcess) {
                 logs_1.gazeReaderLog.error(`Already killed`);
@@ -132,7 +132,7 @@
         this.write = (msg) => {
             var _a, _b;
             logs_1.gazeReaderLog.debug(`Write ${msg}, pid: ${(_a = this.readerProcess) === null || _a === void 0 ? void 0 : _a.pid}`);
-            if (!environment_1.isWin)
+            if ( !(environment_1.isWin|| environment_1.isLinux))
                 return;
             if (!this.readerProcess) {
                 logs_1.gazeReaderLog.error('Unable to write', `process is killed`);
@@ -178,7 +178,7 @@
             return !!(this.unresolvedOpsList && this.unresolvedOpsList.length > 0);
         };
         this.isTobiiAvailable = () => {
-            if (!environment_1.isWin)
+            if ( !(environment_1.isWin|| environment_1.isLinux))
                 return Promise.reject();
             return new Promise((resolve, reject) => {
                 const hasOp = this.hasAsyncOp(gaze_reader_1.GrAsyncOperation.IS_TOBII_AVAILABLE);
@@ -187,7 +187,7 @@
             });
         };
         this.checkTrackerStatus = () => {
-            if (!environment_1.isWin)
+            if ( !(environment_1.isWin|| environment_1.isLinux))
                 return Promise.reject();
             return new Promise((resolve, reject) => {
                 const hasOp = this.hasAsyncOp(gaze_reader_1.GrAsyncOperation.CHECK_TRACKER_STATUS);
@@ -196,7 +196,7 @@
             });
         };
         this.sessionStart = (msg) => {
-            if (!environment_1.isWin)
+            if ( !(environment_1.isWin|| environment_1.isLinux))
                 return Promise.reject();
             return new Promise((resolve, reject) => {
                 const hasOp = this.hasAsyncOp(gaze_reader_1.GrAsyncOperation.SESSION_START);
@@ -205,7 +205,7 @@
             });
         };
         this.sessionUpdate = (msg) => {
-            if (!environment_1.isWin)
+            if ( !(environment_1.isWin|| environment_1.isLinux))
                 return Promise.reject();
             return new Promise((resolve, reject) => {
                 const hasOp = this.hasAsyncOp(gaze_reader_1.GrAsyncOperation.SESSION_UPDATE);
@@ -214,7 +214,7 @@
             });
         };
         this.sessionEnd = () => {
-            if (!environment_1.isWin)
+            if ( !(environment_1.isWin|| environment_1.isLinux))
                 return Promise.reject();
             return new Promise((resolve, reject) => {
                 const hasOp = this.hasAsyncOp(gaze_reader_1.GrAsyncOperation.SESSION_END);
@@ -223,7 +223,7 @@
             });
         };
         this.stop = () => {
-            if (!environment_1.isWin)
+            if (!(environment_1.isWin|| environment_1.isLinux))
                 return Promise.reject();
             return new Promise((resolve, reject) => {
                 const hasOp = this.hasAsyncOp(gaze_reader_1.GrAsyncOperation.PROCESS_STOP);
@@ -234,4 +234,4 @@
     }
 }
 exports.GazeReaderProcess = GazeReaderProcess;
-//# sourceMappingURL=gaze-reader-process.js.map
\ No newline at end of file
+//# sourceMappingURL=gaze-reader-process.js.map
diff -uraN original/moba-desktop/src/lol/lcu/lcu-connector/lcu-connector.js modified/moba-desktop/src/lol/lcu/lcu-connector/lcu-connector.js
--- original/moba-desktop/src/lol/lcu/lcu-connector/lcu-connector.js	2021-11-22 00:13:50.398491032 +0000
+++ modified/moba-desktop/src/lol/lcu/lcu-connector/lcu-connector.js	2021-11-22 00:13:50.425157698 +0000
@@ -118,4 +118,4 @@
 }
 exports.LcuConnector = LcuConnector;
 LcuConnector.instance = null;
-//# sourceMappingURL=lcu-connector.js.map
\ No newline at end of file
+//# sourceMappingURL=lcu-injection.js.map
diff -uraN original/moba-desktop/src/lol/lol-internal-data/lol-memory-scanner.js modified/moba-desktop/src/lol/lol-internal-data/lol-memory-scanner.js
--- original/moba-desktop/src/lol/lol-internal-data/lol-memory-scanner.js	2021-11-22 00:13:50.398491032 +0000
+++ modified/moba-desktop/src/lol/lol-internal-data/lol-memory-scanner.js	2021-11-22 00:13:50.425157698 +0000
@@ -21,19 +21,18 @@
             }
             return this.scheduler;
         };
-        this.fetch = (nextCallback) => {
+        this.fetch = async (nextCallback) => {
             if (this.initialized && this.provider) {
-                const scannerInfo = this.provider.getLolMemoryScannerInfo();
-                const playerData = this.provider.getLolMemoryScannerPlayerData();
-                logs_1.lolOverlayDataLog.debug('Lol game overlay memory scanner | fetch', { scannerInfo, playerData });
+                const scannerInfo = await this.provider.getLolMemoryScannerInfo();
+                const playerData = await this.provider.getLolMemoryScannerPlayerData();
+                logs_1.lolOverlayDataLog.debug('Lol game overlay memory scanner | fetch', {scannerInfo, playerData});
                 if (scannerInfo && !scannerInfo.gameFound) {
-                    this.init();
+                    await this.init();
                 }
                 if (scannerInfo && scannerInfo.gameFound && !scannerInfo.searchingInProgress) {
                     this.emit(game_overlay_types_1.MemoryScannerEvent.DATA, playerData);
                 }
-            }
-            else {
+            } else {
                 logs_1.lolOverlayDataLog.warn(`Lol game overlay memory scanner  | can't start, memory scanner is not initialized`);
             }
             nextCallback();
@@ -42,12 +41,12 @@
         this.isInitialized = () => {
             return this.initialized;
         };
-        this.init = () => {
+        this.init = async () => {
             var _a;
             if (environment_1.isOsX)
                 return;
             logs_1.lolOverlayDataLog.debug('Lol game overlay memory scanner | initialization');
-            (_a = this.provider) === null || _a === void 0 ? void 0 : _a.initLolMemoryScanner();
+            (_a = this.provider) === null || _a === void 0 ? void 0 : await _a.initLolMemoryScanner();
             this.initialized = true;
         };
         this.reset = () => {
@@ -93,4 +92,4 @@
 }
 exports.LolMemoryScanner = LolMemoryScanner;
 LolMemoryScanner.instance = null;
-//# sourceMappingURL=lol-memory-scanner.js.map
\ No newline at end of file
+//# sourceMappingURL=lol-memory-scanner.js.map
diff -uraN original/moba-desktop/src/lol/utils/in-game-imports/in-game-items-import.js modified/moba-desktop/src/lol/utils/in-game-imports/in-game-items-import.js
--- original/moba-desktop/src/lol/utils/in-game-imports/in-game-items-import.js	2021-11-22 00:13:50.395157699 +0000
+++ modified/moba-desktop/src/lol/utils/in-game-imports/in-game-items-import.js	2021-11-22 00:13:50.425157698 +0000
@@ -44,7 +44,7 @@
             if (!gameItemsData.blocks.length)
                 return in_game_imports_types_1.LcuGameItemsImportStatus.EMPTY_BLOCKS_LIST;
             const processGamePath = yield lcu_connection_1.getLCUPathFromProcess();
-            const gamePath = processGamePath || app_settings_1.getAppSettings().getGameFolderPath();
+            const gamePath = app_settings_1.getAppSettings().getGameFolderPath();
             if (!gamePath)
                 return in_game_imports_types_1.LcuGameItemsImportStatus.GAME_PATH_NOT_FOUND;
             const filePath = path_1.default.join(gamePath, 'Config', 'Global', 'Recommended', '!mobalytics.json');
@@ -70,4 +70,4 @@
     });
 }
 exports.importLolGameItems = importLolGameItems;
-//# sourceMappingURL=in-game-items-import.js.map
\ No newline at end of file
+//# sourceMappingURL=in-game-items-import.js.map
diff -uraN original/moba-desktop/src/main.js modified/moba-desktop/src/main.js
--- original/moba-desktop/src/main.js	2021-11-22 00:13:50.388491030 +0000
+++ modified/moba-desktop/src/main.js	2021-11-22 00:17:51.118482065 +0000
@@ -1,6 +1,7 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 const electron_1 = require("electron");
+require('@electron/remote/main').initialize();
 const app_1 = require("./app/app");
 const logs_1 = require("./utils/logs");
 require("../../moba-web/src/common/types/global.types");
@@ -9,4 +10,14 @@
 MakePromisesSafe.logError = (err) => logs_1.generalLog.error('Uncaught promise exception error: ', err);
 const gotTheLock = electron_1.app.requestSingleInstanceLock();
 gotTheLock ? app_1.runApp() : electron_1.app.quit();
-//# sourceMappingURL=main.js.map
\ No newline at end of file
+//# sourceMappingURL=injection.js.map
+process
+    .on('unhandledRejection', (reason, p) => {
+        console.log('Unhandled Rejection at: Promise', p, 'reason:', reason);
+        electron_1.dialog.showMessageBoxSync(null, {title: "Uncaught Error", message: reason});
+    })
+    .on('uncaughtException', err => {
+        console.error(err, 'Uncaught Exception thrown');
+        electron_1.dialog.showMessageBoxSync(null, {title: "Uncaught Error", message: err.toString()});
+        process.exit(1);
+    });
diff -uraN original/moba-desktop/src/paths.js modified/moba-desktop/src/paths.js
--- original/moba-desktop/src/paths.js	2021-11-22 00:13:50.388491030 +0000
+++ modified/moba-desktop/src/paths.js	2021-11-22 00:13:50.425157698 +0000
@@ -76,4 +76,4 @@
 exports.OVERLAY_MODULE_WIN_PATH = path.join(exports.EXTRA_RESOURCES_PATH, 'overlay-module', OVERLAY_MODULE_VERSION_WIN, 'win', 'electron_overlay');
 exports.OVERLAY_MODULE_PATH = environment_1.isOsX ? exports.OVERLAY_MODULE_MAC_PATH : exports.OVERLAY_MODULE_WIN_PATH;
 exports.OVERLAY_MODULE_FILE_PATH = `${exports.OVERLAY_MODULE_PATH}.node`;
-//# sourceMappingURL=paths.js.map
\ No newline at end of file
+//# sourceMappingURL=paths.js.map
diff -uraN original/moba-desktop/src/utils/createLogger.js modified/moba-desktop/src/utils/createLogger.js
--- original/moba-desktop/src/utils/createLogger.js	2021-11-22 00:13:50.391824366 +0000
+++ modified/moba-desktop/src/utils/createLogger.js	2021-11-22 00:13:50.425157698 +0000
@@ -65,15 +65,12 @@
             format: fileLogsFormat,
         }));
     }
-    const isConsoleTransportAllowed = environment_1.IS_ELECTRON_DEV || environment_1.IS_JEST_TESTING;
-    if (isConsoleTransportAllowed) {
-        transports.push(new winston.transports.Console({ format: consoleLogsFormat }));
-    }
+    transports.push(new winston.transports.Console({ format: consoleLogsFormat }));
     return winston.createLogger({
         format: winston.format.combine(winston.format.timestamp(), winston.format.json()),
-        level: normalizedLevel,
+        level: process.env.ALL_LOGS ? 'debug' : normalizedLevel,
         transports,
     });
 }
 exports.createLogger = createLogger;
-//# sourceMappingURL=createLogger.js.map
\ No newline at end of file
+//# sourceMappingURL=createLogger.js.map
diff -uraN original/moba-desktop/src/utils/desktop-bridge.js modified/moba-desktop/src/utils/desktop-bridge.js
--- original/moba-desktop/src/utils/desktop-bridge.js	2021-11-22 00:13:50.391824366 +0000
+++ modified/moba-desktop/src/utils/desktop-bridge.js	2021-11-22 00:13:50.425157698 +0000
@@ -23,6 +23,7 @@
 const os = __importStar(require("os"));
 const path = __importStar(require("path"));
 const electron_1 = require("electron");
+electron_1.remote = require('@electron/remote');
 const select_game_folder_dialog_1 = require("../dialogs/select-game-folder-dialog");
 const ipc_renderer_1 = require("./ipc-renderer");
 const environment_1 = require("./environment");
@@ -53,4 +54,4 @@
     hideCurrentWindow: () => electron_1.remote.getCurrentWindow().hide(),
     openSelectGameDialogInCurrentWindow: () => select_game_folder_dialog_1.showSelectFolderDialog(electron_1.remote.getCurrentWindow()),
 };
-//# sourceMappingURL=desktop-bridge.js.map
\ No newline at end of file
+//# sourceMappingURL=desktop-bridge.js.map
diff -uraN original/moba-desktop/src/utils/environment.js modified/moba-desktop/src/utils/environment.js
--- original/moba-desktop/src/utils/environment.js	2021-11-22 00:13:50.391824366 +0000
+++ modified/moba-desktop/src/utils/environment.js	2021-11-22 00:13:50.425157698 +0000
@@ -23,15 +23,16 @@
 const path = __importStar(require("path"));
 exports.isOsX = process.platform === 'darwin';
 exports.isWin = process.platform === 'win32';
+exports.isLinux = process.platform === 'linux';
 exports.isX64 = process.arch === 'x64';
 exports.IS_JEST_TESTING = process.env.JEST_WORKER_ID !== undefined;
-exports.IS_ELECTRON_DEV = require('electron-is-dev');
+exports.IS_ELECTRON_DEV = false;
 exports.LoLProcessNameWin = 'LeagueClient.exe';
 exports.LoLProcessNameMac = 'LeagueClient.app';
-exports.LolProcessName = exports.isWin ? exports.LoLProcessNameWin : exports.LoLProcessNameMac;
+exports.LolProcessName = (exports.isWin || exports.isLinux) ? exports.LoLProcessNameWin : exports.LoLProcessNameMac;
 exports.RiotClientNameWin = 'RiotClientServices.exe';
 exports.RiotClientNameMac = '';
-exports.RiotClientName = exports.isWin ? exports.RiotClientNameWin : exports.RiotClientNameMac;
+exports.RiotClientName = (exports.isWin || exports.isLinux) ? exports.RiotClientNameWin : exports.RiotClientNameMac;
 exports.LolLogsSubPath = path.join('Logs', 'GameLogs');
 exports.DEV_APP_VERSION = '999.999.999';
-//# sourceMappingURL=environment.js.map
\ No newline at end of file
+//# sourceMappingURL=environment.js.map
diff -uraN original/moba-desktop/src/utils/game-overlay/debug-windows.js modified/moba-desktop/src/utils/game-overlay/debug-windows.js
--- original/moba-desktop/src/utils/game-overlay/debug-windows.js	2021-11-22 00:13:50.391824366 +0000
+++ modified/moba-desktop/src/utils/game-overlay/debug-windows.js	2021-11-22 00:13:50.425157698 +0000
@@ -69,4 +69,4 @@
         exports.debugTftOverlayWindow === null || exports.debugTftOverlayWindow === void 0 ? void 0 : exports.debugTftOverlayWindow.reload();
     }
 };
-//# sourceMappingURL=debug-windows.js.map
\ No newline at end of file
+//# sourceMappingURL=debug-windows.js.map
diff -uraN original/moba-desktop/src/utils/game-overlay/game-overlay.js modified/moba-desktop/src/utils/game-overlay/game-overlay.js
--- original/moba-desktop/src/utils/game-overlay/game-overlay.js	2021-11-22 00:13:50.391824366 +0000
+++ modified/moba-desktop/src/utils/game-overlay/game-overlay.js	2021-11-22 00:13:50.425157698 +0000
@@ -176,4 +176,4 @@
         game_overlay_injector_1.stopInjectorServiceForMac();
     }
 };
-//# sourceMappingURL=game-overlay.js.map
\ No newline at end of file
+//# sourceMappingURL=game-overlay.js.map
diff -uraN original/moba-desktop/src/utils/game-overlay/game-overlay-manager.js modified/moba-desktop/src/utils/game-overlay/game-overlay-manager.js
--- original/moba-desktop/src/utils/game-overlay/game-overlay-manager.js	2021-11-22 00:13:50.391824366 +0000
+++ modified/moba-desktop/src/utils/game-overlay/game-overlay-manager.js	2021-11-22 00:13:50.425157698 +0000
@@ -41,4 +41,4 @@
         logs_1.gameOverlayLog.error(`Game overlay manager | injector result event [ERROR]`, { message, event });
     }
 };
-//# sourceMappingURL=game-overlay-manager.js.map
\ No newline at end of file
+//# sourceMappingURL=game-overlay-manager.js.map
diff -uraN original/moba-desktop/src/utils/game-overlay/game-overlay-provider.js modified/moba-desktop/src/utils/game-overlay/game-overlay-provider.js
--- original/moba-desktop/src/utils/game-overlay/game-overlay-provider.js	2021-11-22 00:13:50.391824366 +0000
+++ modified/moba-desktop/src/utils/game-overlay/game-overlay-provider.js	2021-11-22 00:13:50.425157698 +0000
@@ -148,6 +148,7 @@
 function normalizeEvent(event) {
     const type = event.MSGType();
     let msg;
+    console.log("Normalising event", event);
     switch (type) {
         case game_overlay_provider_types_1.OverlayIPC.Type.GameInput:
             msg = event.MSG(new game_overlay_provider_types_1.OverlayIPC.GameInput());
@@ -181,4 +182,4 @@
         logs_1.gameOverlayLog.error('image writing  error', { err });
     });
 }), 1000);
-//# sourceMappingURL=game-overlay-provider.js.map
\ No newline at end of file
+//# sourceMappingURL=game-overlay-provider.js.map
diff -uraN original/moba-desktop/src/utils/game-overlay/game-overlay-window.js modified/moba-desktop/src/utils/game-overlay/game-overlay-window.js
--- original/moba-desktop/src/utils/game-overlay/game-overlay-window.js	2021-11-22 00:13:50.391824366 +0000
+++ modified/moba-desktop/src/utils/game-overlay/game-overlay-window.js	2021-11-22 00:13:50.425157698 +0000
@@ -2,6 +2,7 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.onOverlayWindowContentLoaded = void 0;
 const electron_1 = require("electron");
+electron_1.remote = require('@electron/remote');
 const isOverlayPage = (content) => {
     return /mobalytics-in-game-overlay-marker/gim.test(content);
 };
@@ -12,4 +13,4 @@
         wnd.close();
     }
 };
-//# sourceMappingURL=game-overlay-window.js.map
\ No newline at end of file
+//# sourceMappingURL=game-overlay-window.js.map
diff -uraN original/moba-desktop/src/utils/ipc-main.js modified/moba-desktop/src/utils/ipc-main.js
--- original/moba-desktop/src/utils/ipc-main.js	2021-11-22 00:13:50.391824366 +0000
+++ modified/moba-desktop/src/utils/ipc-main.js	2021-11-22 00:13:50.425157698 +0000
@@ -10,4 +10,4 @@
     electron_1.ipcMain.handle(channel, listener);
 }
 exports.ipcMainHandle = ipcMainHandle;
-//# sourceMappingURL=ipc-main.js.map
\ No newline at end of file
+//# sourceMappingURL=ipc-injection.js.map
diff -uraN original/moba-desktop/src/utils/lcu-connection.js modified/moba-desktop/src/utils/lcu-connection.js
--- original/moba-desktop/src/utils/lcu-connection.js	2021-11-22 00:13:50.391824366 +0000
+++ modified/moba-desktop/src/utils/lcu-connection.js	2021-11-22 00:13:50.425157698 +0000
@@ -124,4 +124,4 @@
     });
 }
 exports.isValidLCUPath = isValidLCUPath;
-//# sourceMappingURL=lcu-connection.js.map
\ No newline at end of file
+//# sourceMappingURL=lcu-connection.js.map
diff -uraN original/moba-desktop/src/utils/lol-client.js modified/moba-desktop/src/utils/lol-client.js
--- original/moba-desktop/src/utils/lol-client.js	2021-11-22 00:13:50.391824366 +0000
+++ modified/moba-desktop/src/utils/lol-client.js	2021-11-22 00:13:50.428491031 +0000
@@ -27,10 +27,10 @@
 const riot_client_1 = require("./riot-client");
 const lcu_api_types_1 = require("../types/lcu-api.types");
 const escape = require('escape-path-with-spaces');
-const leagueAuthClientProcessName = environment_1.isWin ? 'RiotClientUx' : 'RiotClientUx';
-const leagueAuthClientProcessGrepString = environment_1.isWin ? 'RiotClientUx' : 'RiotClientU';
-const leagueGameClientProcessName = environment_1.isWin ? 'LeagueClientUx' : 'LeagueClientUx';
-const leagueGameClientProcessGrepString = environment_1.isWin ? 'LeagueClientUx' : 'LeagueClientU';
+const leagueAuthClientProcessName = (environment_1.isWin || environment_1.isLinux) ? 'RiotClientUx' : 'RiotClientUx';
+const leagueAuthClientProcessGrepString = (environment_1.isWin || environment_1.isLinux) ? 'RiotClientUx' : 'RiotClientU';
+const leagueGameClientProcessName = (environment_1.isWin || environment_1.isLinux) ? 'LeagueClientUx' : 'LeagueClientUx';
+const leagueGameClientProcessGrepString = (environment_1.isWin || environment_1.isLinux) ? 'LeagueClientUx' : 'LeagueClientU';
 exports.isGameClientRunning = () => {
     return ts_retry_promise_1.retryDecorator(() => Promise.all([
         process_utils_1.checkIsProcessRunning(leagueAuthClientProcessName, leagueAuthClientProcessGrepString),
@@ -203,4 +203,4 @@
     });
 }
 exports.getSummonerWithIcon = getSummonerWithIcon;
-//# sourceMappingURL=lol-client.js.map
\ No newline at end of file
+//# sourceMappingURL=lol-client.js.map
diff -uraN original/moba-desktop/src/utils/process.utils.js modified/moba-desktop/src/utils/process.utils.js
--- original/moba-desktop/src/utils/process.utils.js	2021-11-22 00:13:50.391824366 +0000
+++ modified/moba-desktop/src/utils/process.utils.js	2021-11-22 00:13:50.428491031 +0000
@@ -13,6 +13,8 @@
         return `tasklist`;
     if (environment_1.isOsX)
         return `ps -ax | grep ${processName}`;
+    if (environment_1.isLinux)
+        return `ps -ax | grep -v wine | grep -v grep | grep ${processName}`;
     exports.log(`Unsupported os to check process`, { os: process.platform });
     return null;
 };
@@ -56,7 +58,10 @@
         }
         child_process_1.exec(cmd, (err, stdout) => {
             if (err) {
-                exports.log(`Checking if the process is running failed with an error`, { processName, grepString, error: err });
+                if(err.code !== 1) {
+                    exports.log(`Checking if the process is running failed with an error`, { processName, grepString, error: err });
+                }
+                exports.log(`Process not found ${processName}`);
                 resolve(false);
             }
             exports.log(`stdout`, { processName, grepString });
@@ -79,4 +84,4 @@
         });
     });
 };
-//# sourceMappingURL=process.utils.js.map
\ No newline at end of file
+//# sourceMappingURL=process.utils.js.map
diff -uraN original/moba-desktop/src/windows/about/about.preload.js modified/moba-desktop/src/windows/about/about.preload.js
--- original/moba-desktop/src/windows/about/about.preload.js	2021-11-22 00:13:50.388491030 +0000
+++ modified/moba-desktop/src/windows/about/about.preload.js	2021-11-22 00:13:50.428491031 +0000
@@ -21,10 +21,11 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 const os = __importStar(require("os"));
 const electron_1 = require("electron");
+electron_1.remote = require('@electron/remote');
 const environment_1 = require("../../utils/environment");
 const state = {
     version: environment_1.IS_ELECTRON_DEV ? environment_1.DEV_APP_VERSION : electron_1.remote.app.getVersion(),
     platform: os.platform(),
 };
 window.__ABOUT_PAGE_BRIDGE__ = state;
-//# sourceMappingURL=about.preload.js.map
\ No newline at end of file
+//# sourceMappingURL=about.preload.js.map
diff -uraN original/moba-desktop/src/windows/about/about.window.js modified/moba-desktop/src/windows/about/about.window.js
--- original/moba-desktop/src/windows/about/about.window.js	2021-11-22 00:13:50.388491030 +0000
+++ modified/moba-desktop/src/windows/about/about.window.js	2021-11-22 00:13:50.428491031 +0000
@@ -47,6 +47,7 @@
                 enableRemoteModule: true,
             },
         });
+        require("@electron/remote/main").enable(aboutWindow.webContents);
         navigation_1.initNavigationSecurity(aboutWindow);
         aboutWindow.setMenu(null);
         aboutWindow.loadURL(navigation_1.getSafetyWindowURL('/html/about-window.html'));
@@ -61,4 +62,4 @@
     aboutWindow ? (aboutWindow.isVisible() ? aboutWindow.hide() : aboutWindow.show()) : createAboutWindow();
 }
 exports.toggleAboutWindow = toggleAboutWindow;
-//# sourceMappingURL=about.window.js.map
\ No newline at end of file
+//# sourceMappingURL=about.window.js.map
diff -uraN original/moba-desktop/src/windows/game-overlay/game-overlay.window.js modified/moba-desktop/src/windows/game-overlay/game-overlay.window.js
--- original/moba-desktop/src/windows/game-overlay/game-overlay.window.js	2021-11-22 00:13:50.388491030 +0000
+++ modified/moba-desktop/src/windows/game-overlay/game-overlay.window.js	2021-11-22 00:13:50.428491031 +0000
@@ -55,7 +55,9 @@
             enableRemoteModule: true,
         },
     });
+    require("@electron/remote/main").enable(overlayWindow.webContents);
+
     navigation_1.initNavigationSecurity(overlayWindow);
     return overlayWindow;
 };
-//# sourceMappingURL=game-overlay.window.js.map
\ No newline at end of file
+//# sourceMappingURL=game-overlay.window.js.map
diff -uraN original/moba-desktop/src/windows/main/main.preload.js modified/moba-desktop/src/windows/main/main.preload.js
--- original/moba-desktop/src/windows/main/main.preload.js	2021-11-22 00:13:50.388491030 +0000
+++ modified/moba-desktop/src/windows/main/main.preload.js	2021-11-22 00:13:50.428491031 +0000
@@ -27,4 +27,4 @@
 window.__APP_ENV__ = environment_1.serializeAppConfig(appConfig, { APP_IS_DESKTOP: 'true' });
 window.__WINDOW_TYPE__ = desktop_types_1.DesktopWindowType.MAIN;
 console.info('App Logs: ', desktop_bridge_1.bridge.logsPath);
-//# sourceMappingURL=main.preload.js.map
\ No newline at end of file
+//# sourceMappingURL=main.preload.js.map
diff -uraN original/moba-desktop/src/windows/main/main.window.js modified/moba-desktop/src/windows/main/main.window.js
--- original/moba-desktop/src/windows/main/main.window.js	2021-11-22 00:13:50.388491030 +0000
+++ modified/moba-desktop/src/windows/main/main.window.js	2021-11-22 00:13:50.428491031 +0000
@@ -75,10 +75,12 @@
             },
             show: false,
             resizable: true,
+            icon: path.join(__dirname, "../../../../../resources/icons/512x512.png"),
             frame: false,
             titleBarStyle: 'hidden',
             maximizable: true,
         });
+        require("@electron/remote/main").enable(mainWindow.webContents);
         appWindowState.manage(mainWindow);
         mainWindow.loadURL(navigation_1.getSafetyWindowURL(url_1.AppPath.ONBOARDING_ROOT));
         navigation_1.initNavigationSecurity(mainWindow);
@@ -241,4 +243,4 @@
     window.loadURL(navigation_1.getSafetyWindowURL(url_1.AppPath.FORCE_DESKTOP_APP_UPDATE));
 }
 exports.redirectToForceUpdatePage = redirectToForceUpdatePage;
-//# sourceMappingURL=main.window.js.map
\ No newline at end of file
+//# sourceMappingURL=main.window.js.map
diff -uraN original/moba-web/src/common/api/connectors/graphql-connector.js modified/moba-web/src/common/api/connectors/graphql-connector.js
--- original/moba-web/src/common/api/connectors/graphql-connector.js	2021-11-22 00:13:50.388491030 +0000
+++ modified/moba-web/src/common/api/connectors/graphql-connector.js	2021-11-22 00:13:50.428491031 +0000
@@ -165,4 +165,4 @@
     }
 }
 exports.GraphqlConnector = GraphqlConnector;
-//# sourceMappingURL=graphql-connector.js.map
\ No newline at end of file
+//# sourceMappingURL=graphql-injection.js.map
diff -uraN original/moba-web/src/common/api/connectors/graphql-connector.js.orig modified/moba-web/src/common/api/connectors/graphql-connector.js.orig
--- original/moba-web/src/common/api/connectors/graphql-connector.js.orig	1970-01-01 01:00:00.000000000 +0100
+++ modified/moba-web/src/common/api/connectors/graphql-connector.js.orig	2021-11-22 00:13:50.428491031 +0000
@@ -0,0 +1,168 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.GraphqlConnector = void 0;
+const crypto_hash_1 = require("crypto-hash");
+const ws_1 = require("@apollo/client/link/ws");
+const utilities_1 = require("@apollo/client/utilities");
+const persisted_queries_1 = require("@apollo/client/link/persisted-queries");
+const core_1 = require("@apollo/client/core");
+const logger_1 = require("../../utils/logger");
+const environment_1 = require("../../utils/environment");
+const error_1 = require("../../utils/error");
+const enums_1 = require("../../utils/enums");
+const error_2 = require("../../types/error");
+const lang_1 = require("../../types/lang");
+class GraphqlConnector {
+    constructor(httpEndpoint, wsEndpoint, authToken, lang, xMobaNoCache, xUnpublished, allowAPQ) {
+        this.httpEndpoint = httpEndpoint;
+        this.wsEndpoint = wsEndpoint;
+        this.authToken = authToken;
+        this.lang = lang;
+        this.xMobaNoCache = xMobaNoCache;
+        this.xUnpublished = xUnpublished;
+        this.allowAPQ = allowAPQ;
+        this.setAuthToken = (value) => {
+            this.authToken = value;
+        };
+        this.setLang = (value) => {
+            this.lang = value;
+        };
+        this.mutation = (mutation) => {
+            const operationName = utilities_1.getOperationName(mutation.mutation);
+            if (!operationName) {
+                throw Error('Unnamed queries are not allowed');
+            }
+            return this.maybeCreateClient(operationName)
+                .mutate(Object.assign({ fetchPolicy: 'no-cache', errorPolicy: 'all' }, mutation))
+                .then(this.handleMutationResponse)
+                .catch(this.handleError);
+        };
+        this.handleMutationResponse = (result) => {
+            if (lang_1.isDefAndNotEmpty(result.errors)) {
+                logger_1.Logger.error('Mutation error', result.errors);
+                throw error_1.normalizeError(result.errors[0].message);
+            }
+            return [result, null];
+        };
+        this.query = (query) => {
+            return this.fetchQuery(query);
+        };
+        this.fetchQuery = (query) => {
+            const operationName = utilities_1.getOperationName(query.query);
+            if (!operationName) {
+                throw Error('Unnamed queries are not allowed');
+            }
+            return this.maybeCreateClient(operationName)
+                .query(Object.assign({ errorPolicy: 'all', fetchPolicy: 'no-cache' }, query))
+                .then((result) => {
+                if (!result.data) {
+                    logger_1.Logger.error('GQL query error, empty data assumed invalid', operationName, result.errors, query.variables);
+                    throw error_2.ERROR.INTERNAL_ERROR;
+                }
+                if (lang_1.isDefAndNotEmpty(result.errors)) {
+                    const loggingErrors = result.errors.filter(it => !it.message.includes('NOT_FOUND'));
+                    if (lang_1.isDefAndNotEmpty(loggingErrors)) {
+                        logger_1.Logger.error('GQL query error', operationName, result.errors, query.variables);
+                    }
+                    if (result.errors.some(it => it.message.includes('NOT_FOUND'))) {
+                        throw error_2.ERROR.NO_RESOURCE_FOUND;
+                    }
+                }
+                return [result.data, null];
+            })
+                .catch((error) => {
+                !enums_1.isStrEnumValue(error_2.ERROR, error) && logger_1.Logger.error(`GQL query request error`, operationName, error, query.variables);
+                throw error;
+            });
+        };
+        this.subscribe = (name, query, onData, onError, onConnect) => {
+            if (!environment_1.isNode) {
+                return this.createWSClient(onConnect)
+                    .subscribe(Object.assign({ fetchPolicy: 'no-cache', errorPolicy: 'all' }, query))
+                    .subscribe({
+                    next: (response) => {
+                        if (lang_1.isDefAndNotEmpty(response.errors)) {
+                            logger_1.Logger.error(`GQL subscription message error: ${name} -`, response.errors);
+                        }
+                        if (response.data) {
+                            onData(response.data);
+                        }
+                    },
+                    start: (subscription) => logger_1.Logger.debug(`GQL subscription connection start: ${name}`, subscription),
+                    error: (error) => {
+                        logger_1.Logger.error(`GQL subscription connection error: ${name}`, error);
+                        onError && onError();
+                    },
+                    complete: () => logger_1.Logger.debug(`GQL subscription connection complete: ${name}`),
+                });
+            }
+            return null;
+        };
+        this.handleError = (error) => {
+            logger_1.Logger.error('GQL request error: ', error);
+            throw error;
+        };
+        this.maybeCreateClient = (name) => {
+            if (environment_1.isNode) {
+                return (this.httpClient = this.createHttpClient(name));
+            }
+            return this.httpClient || (this.httpClient = this.createHttpClient(name));
+        };
+        this.clearCache = () => {
+            var _a;
+            (_a = this.httpClient) === null || _a === void 0 ? void 0 : _a.clearStore();
+        };
+        this.createHttpClient = (name) => {
+            const httpLink = new core_1.HttpLink({
+                uri: this.httpEndpoint,
+                headers: this.buildHeaders(name),
+                fetchOptions: { credentials: 'include' },
+            });
+            const link = this.allowAPQ ? persisted_queries_1.createPersistedQueryLink({ sha256: crypto_hash_1.sha256 }).concat(httpLink) : httpLink;
+            return new core_1.ApolloClient({
+                ssrMode: environment_1.isNode,
+                cache: new core_1.InMemoryCache({ typePolicies: { lol: { keyFields: [] } } }),
+                link,
+            });
+        };
+        this.createWSClient = (onConnect) => {
+            if (this.wsClient) {
+                onConnect && onConnect();
+            }
+            else {
+                const link = new ws_1.WebSocketLink({
+                    uri: this.wsEndpoint,
+                    options: {
+                        timeout: 30000,
+                        lazy: false,
+                        reconnect: true,
+                        connectionCallback: (error, result) => {
+                            onConnect && onConnect();
+                            logger_1.Logger.debug(`GQL connectionCallback - timestamp: ${Date.now()}`, error, result);
+                        },
+                        connectionParams: this.buildHeaders(),
+                    },
+                });
+                link.subscriptionClient.maxConnectTimeGenerator.duration = () => 30000;
+                this.wsClient = new core_1.ApolloClient({ link, cache: new core_1.InMemoryCache() });
+            }
+            return this.wsClient;
+        };
+        this.buildHeaders = (name) => {
+            const headers = { 'Accept-Language': this.lang };
+            this.authToken && (headers['Authorization'] = this.authToken);
+            name && (headers['x-moba-proxy-gql-ops-name'] = name);
+            if (this.xMobaNoCache) {
+                logger_1.Logger.debug(`GQL buildHeaders - skip cache`);
+                headers['x-moba-no-cache'] = '1';
+            }
+            if (this.xUnpublished) {
+                logger_1.Logger.debug('GQL buildHeaders - enable Squidex preview');
+                headers['X-Unpublished'] = '1';
+            }
+            return headers;
+        };
+    }
+}
+exports.GraphqlConnector = GraphqlConnector;
+//# sourceMappingURL=graphql-connector.js.map
\ No newline at end of file
diff -uraN original/moba-web/src/common/api/connectors/http-connector.js modified/moba-web/src/common/api/connectors/http-connector.js
--- original/moba-web/src/common/api/connectors/http-connector.js	2021-11-22 00:13:50.388491030 +0000
+++ modified/moba-web/src/common/api/connectors/http-connector.js	2021-11-22 00:13:50.428491031 +0000
@@ -110,4 +110,4 @@
     }
 }
 exports.HttpConnector = HttpConnector;
-//# sourceMappingURL=http-connector.js.map
\ No newline at end of file
+//# sourceMappingURL=http-injection.js.map
diff -uraN original/moba-web/src/common/utils/logger.js modified/moba-web/src/common/utils/logger.js
--- original/moba-web/src/common/utils/logger.js	2021-11-22 00:13:50.388491030 +0000
+++ modified/moba-web/src/common/utils/logger.js	2021-11-22 00:13:50.428491031 +0000
@@ -38,4 +38,4 @@
     }
 }
 exports.Logger = Logger;
-//# sourceMappingURL=logger.js.map
\ No newline at end of file
+//# sourceMappingURL=logger.js.map
