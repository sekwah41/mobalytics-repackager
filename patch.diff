diff -uraN original/moba-desktop/src/app/app.js modified/moba-desktop/src/app/app.js
--- original/moba-desktop/src/app/app.js	2021-11-06 19:29:38.798404652 +0000
+++ modified/moba-desktop/src/app/app.js	2021-11-07 03:45:06.658982245 +0000
@@ -11,6 +11,7 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.runApp = exports.APP_USER_MODEL_ID = void 0;
 const electron_1 = require("electron");
+electron_1.app.disableHardwareAcceleration()
 const game_data_controller_1 = require("../lol/game-data-controller");
 const app_tray_1 = require("./app-tray");
 const app_settings_1 = require("./app-settings");
@@ -57,4 +58,4 @@
     });
 }
 exports.runApp = runApp;
-//# sourceMappingURL=app.js.map
\ No newline at end of file
+//# sourceMappingURL=app.js.map
diff -uraN original/moba-desktop/src/app/auto-update.js modified/moba-desktop/src/app/auto-update.js
--- original/moba-desktop/src/app/auto-update.js	2021-11-06 19:29:38.798404652 +0000
+++ modified/moba-desktop/src/app/auto-update.js	2021-11-06 19:29:38.818404653 +0000
@@ -23,7 +23,7 @@
 function init() {
     electron_updater_1.autoUpdater.autoDownload = false;
     electron_updater_1.autoUpdater.allowDowngrade = true;
-    electron_updater_1.autoUpdater.autoInstallOnAppQuit = true;
+    electron_updater_1.autoUpdater.autoInstallOnAppQuit = false;
     electron_updater_1.autoUpdater.logger = logs_1.appAutoUpdateLog;
     if (environment_1.IS_ELECTRON_DEV) {
         electron_updater_1.autoUpdater.channel = app_config_1.DESKTOP_DEV_UPDATE_CHANNEL;
@@ -53,7 +53,7 @@
         main_window_1.sendAppUpdateStatus(desktop_types_1.AppUpdateStatus.UPDATE_DOWNLOADED);
     });
     electron_updater_1.autoUpdater.on('error', err => {
-        main_window_1.sendAppUpdateStatus(desktop_types_1.AppUpdateStatus.ERROR);
+        //main_window_1.sendAppUpdateStatus(desktop_types_1.AppUpdateStatus.ERROR);
         logs_1.appAutoUpdateLog.error('Error: ', err);
     });
     setInterval(checkForUpdates, app_config_1.DESKTOP_APP_UPDATE_INTERVAL);
@@ -85,4 +85,4 @@
     electron_updater_1.autoUpdater.quitAndInstall();
 }
 exports.quitAndInstall = quitAndInstall;
-//# sourceMappingURL=auto-update.js.map
\ No newline at end of file
+//# sourceMappingURL=auto-update.js.map
diff -uraN original/moba-desktop/src/app/deep-linking.js modified/moba-desktop/src/app/deep-linking.js
--- original/moba-desktop/src/app/deep-linking.js	2021-11-06 19:29:38.798404652 +0000
+++ modified/moba-desktop/src/app/deep-linking.js	2021-11-06 19:29:38.818404653 +0000
@@ -34,8 +34,10 @@
 const ipc_messages_types_1 = require("../../../moba-web/src/common/types/desktop/ipc-messages.types");
 function initDeepLinking() {
     electron_1.app.removeAsDefaultProtocolClient(app_config_1.MOBA_PROTOCOL_NAME);
-    if (environment_1.IS_ELECTRON_DEV && environment_1.isWin) {
-        electron_1.app.setAsDefaultProtocolClient(app_config_1.MOBA_PROTOCOL_NAME, process.execPath, [path.resolve(process.argv[1])]);
+    if (process.defaultApp) {
+        if (process.argv.length >= 2) {
+            electron_1.app.setAsDefaultProtocolClient(app_config_1.MOBA_PROTOCOL_NAME, process.execPath, [path.resolve(process.argv[1])]);
+        }
     }
     else {
         electron_1.app.setAsDefaultProtocolClient(app_config_1.MOBA_PROTOCOL_NAME);
@@ -52,7 +54,7 @@
         main_window_1.showAndRestoreMainWindow();
     });
     electron_1.app.on('second-instance', (_e, argv) => {
-        if (environment_1.isWin) {
+        if (environment_1.isWin || environment_1.isLinux) {
             const url = argv.find(it => it.startsWith(`${app_config_1.MOBA_PROTOCOL_NAME}:`));
             url && processDeepLinkingUrl(url);
         }
@@ -84,4 +86,4 @@
         logs_1.appUrlsLog.error('Unknown moba protocol communication url: ', { url });
     }
 }
-//# sourceMappingURL=deep-linking.js.map
\ No newline at end of file
+//# sourceMappingURL=deep-linking.js.map
diff -uraN original/moba-desktop/src/app/ipc-protocol/ipc-protocol.js modified/moba-desktop/src/app/ipc-protocol/ipc-protocol.js
--- original/moba-desktop/src/app/ipc-protocol/ipc-protocol.js	2021-11-06 19:29:38.798404652 +0000
+++ modified/moba-desktop/src/app/ipc-protocol/ipc-protocol.js	2021-11-06 19:29:38.818404653 +0000
@@ -170,7 +170,7 @@
     }));
     ipc_main_1.ipcMainHandle(ipc_messages_types_1.IPC_MESSAGE.IS_TOBII_AVAILABLE, () => {
         return new Promise(resolve => {
-            if (environment_1.isWin) {
+            if (environment_1.isWin || environment_1.isLinux) {
                 const reader = new gaze_reader_process_1.GazeReaderProcess();
                 reader
                     .spawn(null)
@@ -197,7 +197,7 @@
     });
     ipc_main_1.ipcMainHandle(ipc_messages_types_1.IPC_MESSAGE.CHECK_TOBII_TRACKER_STATUS, () => {
         return new Promise(resolve => {
-            if (environment_1.isWin) {
+            if (environment_1.isWin || environment_1.isLinux) {
                 const reader = new gaze_reader_process_1.GazeReaderProcess();
                 reader
                     .spawn(null)
@@ -242,4 +242,4 @@
     app_settings_ipc_1.initAppSettingsIpc();
 }
 exports.init = init;
-//# sourceMappingURL=ipc-protocol.js.map
\ No newline at end of file
+//# sourceMappingURL=ipc-protocol.js.map
diff -uraN original/moba-desktop/src/dialogs/select-game-folder-dialog.js modified/moba-desktop/src/dialogs/select-game-folder-dialog.js
--- original/moba-desktop/src/dialogs/select-game-folder-dialog.js	2021-11-06 19:29:38.795071319 +0000
+++ modified/moba-desktop/src/dialogs/select-game-folder-dialog.js	2021-11-06 19:29:38.818404653 +0000
@@ -11,18 +11,40 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.showSelectFolderDialog = void 0;
 const electron_1 = require("electron");
+const prompt = require('electron-prompt');
 const lcu_connection_1 = require("../utils/lcu-connection");
 const ipc_messages_types_1 = require("../../../moba-web/src/common/types/desktop/ipc-messages.types");
 function showSelectFolderDialog(window) {
     if (electron_1.remote) {
         return electron_1.remote.dialog
             .showOpenDialog(window, {
-            title: 'Choose the LoL installation path. e.g C:\\Riot Games\\League of Legends',
+            title: 'Choose the LoL installation path. e.g drive_c/Riot Games/League of Legends/ (click cancel if font is missing)',
             message: 'Choose the LoL installation path. e.g /Applications/League of Legends.app/',
             buttonLabel: 'Select Directory',
             properties: ['openDirectory', 'treatPackageAsDirectory', 'showHiddenFiles'],
-        })
-            .then((result) => __awaiter(this, void 0, void 0, function* () {
+        }).then(result => {
+            return new Promise((res, rej) => {
+                if(result.canceled) {
+                    prompt({
+                        title: 'Enter the LoL installation path',
+                        label: 'Path must be exact',
+                        value: '/drive_c/Riot Games/League of Legends/',
+                        inputAttrs: {
+                            type: 'text'
+                        },
+                        type: 'input'
+                    }, window).then((r) => {
+                        if(r === null) {
+                            res(result);
+                        } else {
+                            res({filePaths:[r]});
+                        }
+                    });
+                } else {
+                    res(result);
+                }
+            })
+        }).then((result) => __awaiter(this, void 0, void 0, function* () {
             if (!result.canceled) {
                 const folder = result.filePaths ? result.filePaths[0] : null;
                 const isValid = yield lcu_connection_1.isValidLCUPath(folder);
@@ -46,4 +68,4 @@
     }
 }
 exports.showSelectFolderDialog = showSelectFolderDialog;
-//# sourceMappingURL=select-game-folder-dialog.js.map
\ No newline at end of file
+//# sourceMappingURL=select-game-folder-dialog.js.map
diff -uraN original/moba-desktop/src/game-overlay/game-overlay-manager.js modified/moba-desktop/src/game-overlay/game-overlay-manager.js
--- original/moba-desktop/src/game-overlay/game-overlay-manager.js	2021-11-06 19:29:38.795071319 +0000
+++ modified/moba-desktop/src/game-overlay/game-overlay-manager.js	2021-11-06 19:29:38.818404653 +0000
@@ -104,18 +104,18 @@
             window.resize({ width, height });
         };
         this.createOverlayInjector = () => {
-            const OverlayInjector = environment_1.isWin ? win_overlay_injector_1.WinOverlayInjector : mac_overlay_injector_1.MacOverlayInjector;
+            const OverlayInjector = environment_1.isLinux ? win_overlay_injector_1.WinOverlayInjector : mac_overlay_injector_1.MacOverlayInjector;
             const injector = new OverlayInjector();
             this.overlayInjector = injector;
             return injector;
         };
         this.createOverlayServer = () => {
-            return environment_1.isWin
+            return environment_1.isLinux
                 ? new win_overlay_server_1.WinOverlayServer(win_overlay_provider_1.WinOverlayProvider.getInstance())
                 : new mac_overlay_server_1.MacOverlayServer(mac_overlay_provider_1.MacOverlayProvider.getInstance());
         };
         this.createOverlayProvider = () => {
-            return environment_1.isWin ? win_overlay_provider_1.WinOverlayProvider.getInstance() : mac_overlay_provider_1.MacOverlayProvider.getInstance();
+            return environment_1.isLinux ? win_overlay_provider_1.WinOverlayProvider.getInstance() : mac_overlay_provider_1.MacOverlayProvider.getInstance();
         };
         this.getSpecificOverlayWindowSettings = (windowId) => __awaiter(this, void 0, void 0, function* () {
             const settings = { scaleFactor: this.scaleFactor };
@@ -210,7 +210,7 @@
         });
         this.stop = (windowId) => {
             const injector = this.getOverlayInjector();
-            if (injector && environment_1.isWin) {
+            if (injector && environment_1.isLinux) {
                 injector.stop();
                 logs_1.gameOverlayLog.debug(`Game overlay manager | injector for ${game_overlay_1.getOverlayWindowName(windowId)} was stopped`);
             }
@@ -251,4 +251,4 @@
     }
     return GameOverlayManager.instance;
 };
-//# sourceMappingURL=game-overlay-manager.js.map
\ No newline at end of file
+//# sourceMappingURL=game-overlay-manager.js.map
diff -uraN original/moba-desktop/src/game-overlay/overlay-injector/win-overlay-injector.js modified/moba-desktop/src/game-overlay/overlay-injector/win-overlay-injector.js
--- original/moba-desktop/src/game-overlay/overlay-injector/win-overlay-injector.js	2021-11-06 19:29:38.795071319 +0000
+++ modified/moba-desktop/src/game-overlay/overlay-injector/win-overlay-injector.js	2021-11-07 03:35:28.372304352 +0000
@@ -10,14 +10,69 @@
 const base_overlay_injector_1 = require("./base-overlay-injector");
 const promise_with_retry_1 = require("../../../../moba-web/src/common/utils/promise-with-retry");
 const process_utils_1 = require("../../utils/process.utils");
+const fs = require('fs');
+
+function getLeagueEnvVariables() {
+    return new Promise((resolve,reject) => {
+        child_process_1.exec("ps -ax | grep -v grep | grep wine | grep LeagueClient.exe", (err, stdout) => {
+            if(err) {
+                process_utils_1.log("Could not find wine start process");
+                reject();
+                return;
+            }
+            try {
+                const processId = /([0-9])+/.exec(stdout);
+                if(processId) {
+                    process_utils_1.log(`Reading /proc/${processId[0]}/environ`);
+                    const envVariables = fs.readFileSync(`/proc/${processId[0]}/environ`).toString('utf8').split('\0').map(value => {
+                        const indexOf = value.indexOf('=');
+                        return [value.slice(0,indexOf), value.slice(indexOf + 1)];
+                    });
+                    const leagueEnv = {};
+                    envVariables.forEach(value => {
+                        leagueEnv[value[0]] = value[1];
+                    });
+                    resolve(leagueEnv);
+                    return;
+                } else {
+                    process_utils_1.log("Could not find wine start process");
+                }
+                reject();
+            } catch(e) {
+                reject();
+            }
+        });
+    });
+}
+
+/**
+ * Modified to run for linux
+ */
 class WinOverlayInjector extends base_overlay_injector_1.BaseOverlayInjector {
     constructor() {
+        process_utils_1.log("Overlay injector working dir", paths_1.OVERLAY_INJECTOR_WIN_WORKING_DIR);
+        process_utils_1.log("Overlay injector config name", paths_1.OVERLAY_INJECTOR_CONFIG_NAME);
         super(paths_1.OVERLAY_INJECTOR_WIN_WORKING_DIR, paths_1.OVERLAY_INJECTOR_CONFIG_NAME);
-        this.startInternal = () => {
+        this.startInternal = async () => {
             const pathToInjector = path_1.default.join(paths_1.OVERLAY_INJECTOR_WIN_WORKING_DIR, `${paths_1.OVERLAY_INJECTOR_FILE_NAME}.exe`);
             process_utils_1.log(`start overlay injector: ${pathToInjector}`);
-            this.process = child_process_1.spawn(pathToInjector);
-            const { stdout, stderr } = this.process;
+            console.log("Trying to start:", pathToInjector);
+            const leagueVariables = await getLeagueEnvVariables();
+
+            child_process_1.exec(`${leagueVariables.WINE} taskmgr`, {
+                env: {
+                    ...leagueVariables
+                }
+            }, (err, stdout) => {
+
+            });
+            process_utils_1.log(`starting with command: ${leagueVariables.WINE} ${pathToInjector}`);
+            this.process = child_process_1.spawn(`${leagueVariables.WINE} ${pathToInjector}`, {
+                env: {
+                    ...leagueVariables
+                }
+            });
+            const {stdout, stderr} = this.process;
             if (stdout) {
                 stdout.on('data', (data) => {
                     process_utils_1.log(`stout data, data: ${data}`);
@@ -65,18 +120,17 @@
                 process_utils_1.log(`exit, message: ${message}`);
             });
             this.process.on('spawn', (message) => {
-                process_utils_1.log(`overlay injector spawned`, { message });
+                process_utils_1.log(`overlay injector spawned`, {message});
             });
             promise_with_retry_1.promiseWithRetry(() => process_utils_1.checkIsProcessRunning(paths_1.OVERLAY_INJECTOR_FILE_NAME, paths_1.OVERLAY_INJECTOR_WIN_PROGRAM_GREP_STR), 500, result => !!result)
                 .then(isRunning => {
-                if (isRunning) {
-                    process_utils_1.log(`Overlay injector successfully started`);
-                }
-                else {
-                    process_utils_1.log(`Overlay injector didn't start`, undefined, 'error');
-                }
-            })
-                .catch(reason => process_utils_1.log(`Checking if the process was started failed.`, { reason }, 'error'));
+                    if (isRunning) {
+                        process_utils_1.log(`Overlay injector successfully started`);
+                    } else {
+                        process_utils_1.log(`Overlay injector didn't start`, undefined, 'error');
+                    }
+                })
+                .catch(reason => process_utils_1.log(`Checking if the process was started failed.`, {reason}, 'error'));
         };
         this.isRunning = () => {
             return process_utils_1.checkIsProcessRunning(paths_1.OVERLAY_INJECTOR_FILE_NAME, paths_1.OVERLAY_INJECTOR_WIN_PROGRAM_GREP_STR);
@@ -124,4 +178,4 @@
     }
 }
 exports.WinOverlayInjector = WinOverlayInjector;
-//# sourceMappingURL=win-overlay-injector.js.map
\ No newline at end of file
+//# sourceMappingURL=win-overlay-injector.js.map
diff -uraN original/moba-desktop/src/gaze-reader/gaze-reader-game-processor.js modified/moba-desktop/src/gaze-reader/gaze-reader-game-processor.js
--- original/moba-desktop/src/gaze-reader/gaze-reader-game-processor.js	2021-11-06 19:29:38.795071319 +0000
+++ modified/moba-desktop/src/gaze-reader/gaze-reader-game-processor.js	2021-11-06 19:29:38.818404653 +0000
@@ -26,7 +26,7 @@
         this.reader = null;
         this.gamesInfoMap = null;
         this.gameStarted = (gameId, summoner, qType) => {
-            if (!environment_1.isWin)
+            if (!(environment_1.isWin || environment_1.isLinux))
                 return;
             if (!app_settings_1.getAppSettings().isTobiiEyeTrackerEnabled())
                 return;
@@ -42,7 +42,7 @@
             });
         };
         this.gameFinished = (gameId) => {
-            if (!environment_1.isWin)
+            if (!(environment_1.isWin || environment_1.isLinux))
                 return;
             if (!app_settings_1.getAppSettings().isTobiiEyeTrackerEnabled())
                 return;
@@ -202,4 +202,4 @@
 }
 exports.GazeReaderGameProcessor = GazeReaderGameProcessor;
 GazeReaderGameProcessor.instance = null;
-//# sourceMappingURL=gaze-reader-game-processor.js.map
\ No newline at end of file
+//# sourceMappingURL=gaze-reader-game-processor.js.map
diff -uraN original/moba-desktop/src/gaze-reader/gaze-reader-process.js modified/moba-desktop/src/gaze-reader/gaze-reader-process.js
--- original/moba-desktop/src/gaze-reader/gaze-reader-process.js	2021-11-06 19:29:38.795071319 +0000
+++ modified/moba-desktop/src/gaze-reader/gaze-reader-process.js	2021-11-06 19:29:38.818404653 +0000
@@ -15,7 +15,7 @@
         this.spawn = (targetPath) => {
             var _a, _b;
             logs_1.gazeReaderLog.debug(`Spawn ${paths_1.TOBII_BINARY_LOCAL_PATH}, pid: ${(_a = this.readerProcess) === null || _a === void 0 ? void 0 : _a.pid}`);
-            if (!environment_1.isWin)
+            if ( !(environment_1.isWin|| environment_1.isLinux))
                 return Promise.reject();
             if (this.readerProcess) {
                 logs_1.gazeReaderLog.error(`Already spawned, pid: ${(_b = this.readerProcess) === null || _b === void 0 ? void 0 : _b.pid}`);
@@ -56,7 +56,7 @@
         this.kill = () => {
             var _a, _b;
             logs_1.gazeReaderLog.debug(`Kill, pid: ${(_a = this.readerProcess) === null || _a === void 0 ? void 0 : _a.pid}`);
-            if (!environment_1.isWin)
+            if ( !(environment_1.isWin|| environment_1.isLinux))
                 return;
             if (!this.readerProcess) {
                 logs_1.gazeReaderLog.error(`Already killed`);
@@ -132,7 +132,7 @@
         this.write = (msg) => {
             var _a, _b;
             logs_1.gazeReaderLog.debug(`Write ${msg}, pid: ${(_a = this.readerProcess) === null || _a === void 0 ? void 0 : _a.pid}`);
-            if (!environment_1.isWin)
+            if ( !(environment_1.isWin|| environment_1.isLinux))
                 return;
             if (!this.readerProcess) {
                 logs_1.gazeReaderLog.error('Unable to write', `process is killed`);
@@ -178,7 +178,7 @@
             return !!(this.unresolvedOpsList && this.unresolvedOpsList.length > 0);
         };
         this.isTobiiAvailable = () => {
-            if (!environment_1.isWin)
+            if ( !(environment_1.isWin|| environment_1.isLinux))
                 return Promise.reject();
             return new Promise((resolve, reject) => {
                 const hasOp = this.hasAsyncOp(gaze_reader_1.GrAsyncOperation.IS_TOBII_AVAILABLE);
@@ -187,7 +187,7 @@
             });
         };
         this.checkTrackerStatus = () => {
-            if (!environment_1.isWin)
+            if ( !(environment_1.isWin|| environment_1.isLinux))
                 return Promise.reject();
             return new Promise((resolve, reject) => {
                 const hasOp = this.hasAsyncOp(gaze_reader_1.GrAsyncOperation.CHECK_TRACKER_STATUS);
@@ -196,7 +196,7 @@
             });
         };
         this.sessionStart = (msg) => {
-            if (!environment_1.isWin)
+            if ( !(environment_1.isWin|| environment_1.isLinux))
                 return Promise.reject();
             return new Promise((resolve, reject) => {
                 const hasOp = this.hasAsyncOp(gaze_reader_1.GrAsyncOperation.SESSION_START);
@@ -205,7 +205,7 @@
             });
         };
         this.sessionUpdate = (msg) => {
-            if (!environment_1.isWin)
+            if ( !(environment_1.isWin|| environment_1.isLinux))
                 return Promise.reject();
             return new Promise((resolve, reject) => {
                 const hasOp = this.hasAsyncOp(gaze_reader_1.GrAsyncOperation.SESSION_UPDATE);
@@ -214,7 +214,7 @@
             });
         };
         this.sessionEnd = () => {
-            if (!environment_1.isWin)
+            if ( !(environment_1.isWin|| environment_1.isLinux))
                 return Promise.reject();
             return new Promise((resolve, reject) => {
                 const hasOp = this.hasAsyncOp(gaze_reader_1.GrAsyncOperation.SESSION_END);
@@ -223,7 +223,7 @@
             });
         };
         this.stop = () => {
-            if (!environment_1.isWin)
+            if (!(environment_1.isWin|| environment_1.isLinux))
                 return Promise.reject();
             return new Promise((resolve, reject) => {
                 const hasOp = this.hasAsyncOp(gaze_reader_1.GrAsyncOperation.PROCESS_STOP);
@@ -234,4 +234,4 @@
     }
 }
 exports.GazeReaderProcess = GazeReaderProcess;
-//# sourceMappingURL=gaze-reader-process.js.map
\ No newline at end of file
+//# sourceMappingURL=gaze-reader-process.js.map
diff -uraN original/moba-desktop/src/lol/utils/in-game-imports/in-game-items-import.js modified/moba-desktop/src/lol/utils/in-game-imports/in-game-items-import.js
--- original/moba-desktop/src/lol/utils/in-game-imports/in-game-items-import.js	2021-11-06 19:29:38.791737986 +0000
+++ modified/moba-desktop/src/lol/utils/in-game-imports/in-game-items-import.js	2021-11-06 19:29:38.818404653 +0000
@@ -44,7 +44,7 @@
             if (!gameItemsData.blocks.length)
                 return in_game_imports_types_1.LcuGameItemsImportStatus.EMPTY_BLOCKS_LIST;
             const processGamePath = yield lcu_connection_1.getLCUPathFromProcess();
-            const gamePath = processGamePath || app_settings_1.getAppSettings().getGameFolderPath();
+            const gamePath = app_settings_1.getAppSettings().getGameFolderPath();
             if (!gamePath)
                 return in_game_imports_types_1.LcuGameItemsImportStatus.GAME_PATH_NOT_FOUND;
             const filePath = path_1.default.join(gamePath, 'Config', 'Global', 'Recommended', '!mobalytics.json');
@@ -70,4 +70,4 @@
     });
 }
 exports.importLolGameItems = importLolGameItems;
-//# sourceMappingURL=in-game-items-import.js.map
\ No newline at end of file
+//# sourceMappingURL=in-game-items-import.js.map
diff -uraN original/moba-desktop/src/main.js modified/moba-desktop/src/main.js
--- original/moba-desktop/src/main.js	2021-11-06 19:29:38.788404653 +0000
+++ modified/moba-desktop/src/main.js	2021-11-06 19:29:38.818404653 +0000
@@ -1,6 +1,7 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 const electron_1 = require("electron");
+require('@electron/remote/main').initialize();
 const app_1 = require("./app/app");
 const logs_1 = require("./utils/logs");
 require("../../moba-web/src/common/types/global.types");
@@ -9,4 +10,14 @@
 MakePromisesSafe.logError = (err) => logs_1.generalLog.error('Uncaught promise exception error: ', err);
 const gotTheLock = electron_1.app.requestSingleInstanceLock();
 gotTheLock ? app_1.runApp() : electron_1.app.quit();
-//# sourceMappingURL=main.js.map
\ No newline at end of file
+//# sourceMappingURL=main.js.map
+process
+    .on('unhandledRejection', (reason, p) => {
+        electron_1.dialog.showMessageBoxSync(null, {title: "Uncaught Error", message: err});
+        console.error(reason, 'Unhandled Rejection at Promise', p);
+    })
+    .on('uncaughtException', err => {
+        electron_1.dialog.showMessageBoxSync(null, {title: "Uncaught Error", message: err});
+        console.error(err, 'Uncaught Exception thrown');
+        process.exit(1);
+    });
diff -uraN original/moba-desktop/src/utils/createLogger.js modified/moba-desktop/src/utils/createLogger.js
--- original/moba-desktop/src/utils/createLogger.js	2021-11-06 19:29:38.788404653 +0000
+++ modified/moba-desktop/src/utils/createLogger.js	2021-11-06 19:29:38.818404653 +0000
@@ -76,4 +76,4 @@
     });
 }
 exports.createLogger = createLogger;
-//# sourceMappingURL=createLogger.js.map
\ No newline at end of file
+//# sourceMappingURL=createLogger.js.map
diff -uraN original/moba-desktop/src/utils/desktop-bridge.js modified/moba-desktop/src/utils/desktop-bridge.js
--- original/moba-desktop/src/utils/desktop-bridge.js	2021-11-06 19:29:38.788404653 +0000
+++ modified/moba-desktop/src/utils/desktop-bridge.js	2021-11-06 19:29:38.818404653 +0000
@@ -23,6 +23,7 @@
 const os = __importStar(require("os"));
 const path = __importStar(require("path"));
 const electron_1 = require("electron");
+electron_1.remote = require('@electron/remote');
 const select_game_folder_dialog_1 = require("../dialogs/select-game-folder-dialog");
 const ipc_renderer_1 = require("./ipc-renderer");
 const environment_1 = require("./environment");
@@ -53,4 +54,4 @@
     hideCurrentWindow: () => electron_1.remote.getCurrentWindow().hide(),
     openSelectGameDialogInCurrentWindow: () => select_game_folder_dialog_1.showSelectFolderDialog(electron_1.remote.getCurrentWindow()),
 };
-//# sourceMappingURL=desktop-bridge.js.map
\ No newline at end of file
+//# sourceMappingURL=desktop-bridge.js.map
diff -uraN original/moba-desktop/src/utils/environment.js modified/moba-desktop/src/utils/environment.js
--- original/moba-desktop/src/utils/environment.js	2021-11-06 19:29:38.788404653 +0000
+++ modified/moba-desktop/src/utils/environment.js	2021-11-06 19:29:38.818404653 +0000
@@ -23,15 +23,16 @@
 const path = __importStar(require("path"));
 exports.isOsX = process.platform === 'darwin';
 exports.isWin = process.platform === 'win32';
+exports.isLinux = process.platform === 'linux';
 exports.isX64 = process.arch === 'x64';
 exports.IS_JEST_TESTING = process.env.JEST_WORKER_ID !== undefined;
-exports.IS_ELECTRON_DEV = require('electron-is-dev');
+exports.IS_ELECTRON_DEV = false;
 exports.LoLProcessNameWin = 'LeagueClient.exe';
 exports.LoLProcessNameMac = 'LeagueClient.app';
-exports.LolProcessName = exports.isWin ? exports.LoLProcessNameWin : exports.LoLProcessNameMac;
+exports.LolProcessName = (exports.isWin || exports.isLinux) ? exports.LoLProcessNameWin : exports.LoLProcessNameMac;
 exports.RiotClientNameWin = 'RiotClientServices.exe';
 exports.RiotClientNameMac = '';
-exports.RiotClientName = exports.isWin ? exports.RiotClientNameWin : exports.RiotClientNameMac;
+exports.RiotClientName = (exports.isWin || exports.isLinux) ? exports.RiotClientNameWin : exports.RiotClientNameMac;
 exports.LolLogsSubPath = path.join('Logs', 'GameLogs');
 exports.DEV_APP_VERSION = '999.999.999';
-//# sourceMappingURL=environment.js.map
\ No newline at end of file
+//# sourceMappingURL=environment.js.map
diff -uraN original/moba-desktop/src/utils/game-overlay/game-overlay-window.js modified/moba-desktop/src/utils/game-overlay/game-overlay-window.js
--- original/moba-desktop/src/utils/game-overlay/game-overlay-window.js	2021-11-06 19:29:38.788404653 +0000
+++ modified/moba-desktop/src/utils/game-overlay/game-overlay-window.js	2021-11-06 19:29:38.818404653 +0000
@@ -2,6 +2,7 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.onOverlayWindowContentLoaded = void 0;
 const electron_1 = require("electron");
+electron_1.remote = require('@electron/remote');
 const isOverlayPage = (content) => {
     return /mobalytics-in-game-overlay-marker/gim.test(content);
 };
@@ -12,4 +13,4 @@
         wnd.close();
     }
 };
-//# sourceMappingURL=game-overlay-window.js.map
\ No newline at end of file
+//# sourceMappingURL=game-overlay-window.js.map
diff -uraN original/moba-desktop/src/utils/lcu-connection.js modified/moba-desktop/src/utils/lcu-connection.js
--- original/moba-desktop/src/utils/lcu-connection.js	2021-11-06 19:29:38.788404653 +0000
+++ modified/moba-desktop/src/utils/lcu-connection.js	2021-11-06 19:29:38.818404653 +0000
@@ -124,4 +124,4 @@
     });
 }
 exports.isValidLCUPath = isValidLCUPath;
-//# sourceMappingURL=lcu-connection.js.map
\ No newline at end of file
+//# sourceMappingURL=lcu-connection.js.map
diff -uraN original/moba-desktop/src/utils/lol-client.js modified/moba-desktop/src/utils/lol-client.js
--- original/moba-desktop/src/utils/lol-client.js	2021-11-06 19:29:38.788404653 +0000
+++ modified/moba-desktop/src/utils/lol-client.js	2021-11-06 19:49:20.748427600 +0000
@@ -27,10 +27,10 @@
 const riot_client_1 = require("./riot-client");
 const lcu_api_types_1 = require("../types/lcu-api.types");
 const escape = require('escape-path-with-spaces');
-const leagueAuthClientProcessName = environment_1.isWin ? 'RiotClientUx' : 'RiotClientUx';
-const leagueAuthClientProcessGrepString = environment_1.isWin ? 'RiotClientUx' : 'RiotClientU';
-const leagueGameClientProcessName = environment_1.isWin ? 'LeagueClientUx' : 'LeagueClientUx';
-const leagueGameClientProcessGrepString = environment_1.isWin ? 'LeagueClientUx' : 'LeagueClientU';
+const leagueAuthClientProcessName = (environment_1.isWin || environment_1.isLinux) ? 'RiotClientUx' : 'RiotClientUx';
+const leagueAuthClientProcessGrepString = (environment_1.isWin || environment_1.isLinux) ? 'RiotClientUx' : 'RiotClientU';
+const leagueGameClientProcessName = (environment_1.isWin || environment_1.isLinux) ? 'LeagueClientUx' : 'LeagueClientUx';
+const leagueGameClientProcessGrepString = (environment_1.isWin || environment_1.isLinux) ? 'LeagueClientUx' : 'LeagueClientU';
 exports.isGameClientRunning = () => {
     return ts_retry_promise_1.retryDecorator(() => Promise.all([
         process_utils_1.checkIsProcessRunning(leagueAuthClientProcessName, leagueAuthClientProcessGrepString),
@@ -203,4 +203,4 @@
     });
 }
 exports.getSummonerWithIcon = getSummonerWithIcon;
-//# sourceMappingURL=lol-client.js.map
\ No newline at end of file
+//# sourceMappingURL=lol-client.js.map
diff -uraN original/moba-desktop/src/utils/process.utils.js modified/moba-desktop/src/utils/process.utils.js
--- original/moba-desktop/src/utils/process.utils.js	2021-11-06 19:29:38.788404653 +0000
+++ modified/moba-desktop/src/utils/process.utils.js	2021-11-07 02:21:23.495551385 +0000
@@ -6,6 +6,7 @@
 const environment_1 = require("./environment");
 exports.logPrefix = 'Processes utils |';
 exports.log = (message, meta = undefined, type = 'debug') => {
+    console.log(`${exports.logPrefix} ${message}`, meta);
     logs_1.generalLog[type](`${exports.logPrefix} ${message}`, meta);
 };
 const isProcessRunningCmd = (processName) => {
@@ -13,6 +14,8 @@
         return `tasklist`;
     if (environment_1.isOsX)
         return `ps -ax | grep ${processName}`;
+    if (environment_1.isLinux)
+        return `ps -ax | grep -v wine | grep -v grep | grep ${processName}`;
     exports.log(`Unsupported os to check process`, { os: process.platform });
     return null;
 };
@@ -79,4 +82,4 @@
         });
     });
 };
-//# sourceMappingURL=process.utils.js.map
\ No newline at end of file
+//# sourceMappingURL=process.utils.js.map
diff -uraN original/moba-desktop/src/windows/about/about.preload.js modified/moba-desktop/src/windows/about/about.preload.js
--- original/moba-desktop/src/windows/about/about.preload.js	2021-11-06 19:29:38.788404653 +0000
+++ modified/moba-desktop/src/windows/about/about.preload.js	2021-11-06 19:29:38.818404653 +0000
@@ -21,10 +21,11 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 const os = __importStar(require("os"));
 const electron_1 = require("electron");
+electron_1.remote = require('@electron/remote');
 const environment_1 = require("../../utils/environment");
 const state = {
     version: environment_1.IS_ELECTRON_DEV ? environment_1.DEV_APP_VERSION : electron_1.remote.app.getVersion(),
     platform: os.platform(),
 };
 window.__ABOUT_PAGE_BRIDGE__ = state;
-//# sourceMappingURL=about.preload.js.map
\ No newline at end of file
+//# sourceMappingURL=about.preload.js.map
diff -uraN original/moba-desktop/src/windows/about/about.window.js modified/moba-desktop/src/windows/about/about.window.js
--- original/moba-desktop/src/windows/about/about.window.js	2021-11-06 19:29:38.788404653 +0000
+++ modified/moba-desktop/src/windows/about/about.window.js	2021-11-06 19:29:38.818404653 +0000
@@ -47,6 +47,7 @@
                 enableRemoteModule: true,
             },
         });
+        require("@electron/remote/main").enable(aboutWindow.webContents);
         navigation_1.initNavigationSecurity(aboutWindow);
         aboutWindow.setMenu(null);
         aboutWindow.loadURL(navigation_1.getSafetyWindowURL('/html/about-window.html'));
@@ -61,4 +62,4 @@
     aboutWindow ? (aboutWindow.isVisible() ? aboutWindow.hide() : aboutWindow.show()) : createAboutWindow();
 }
 exports.toggleAboutWindow = toggleAboutWindow;
-//# sourceMappingURL=about.window.js.map
\ No newline at end of file
+//# sourceMappingURL=about.window.js.map
diff -uraN original/moba-desktop/src/windows/game-overlay/game-overlay.window.js modified/moba-desktop/src/windows/game-overlay/game-overlay.window.js
--- original/moba-desktop/src/windows/game-overlay/game-overlay.window.js	2021-11-06 19:29:38.788404653 +0000
+++ modified/moba-desktop/src/windows/game-overlay/game-overlay.window.js	2021-11-06 19:29:38.818404653 +0000
@@ -55,7 +55,9 @@
             enableRemoteModule: true,
         },
     });
+    require("@electron/remote/main").enable(overlayWindow.webContents);
+
     navigation_1.initNavigationSecurity(overlayWindow);
     return overlayWindow;
 };
-//# sourceMappingURL=game-overlay.window.js.map
\ No newline at end of file
+//# sourceMappingURL=game-overlay.window.js.map
diff -uraN original/moba-desktop/src/windows/main/main.preload.js modified/moba-desktop/src/windows/main/main.preload.js
--- original/moba-desktop/src/windows/main/main.preload.js	2021-11-06 19:29:38.788404653 +0000
+++ modified/moba-desktop/src/windows/main/main.preload.js	2021-11-06 19:29:38.818404653 +0000
@@ -27,4 +27,4 @@
 window.__APP_ENV__ = environment_1.serializeAppConfig(appConfig, { APP_IS_DESKTOP: 'true' });
 window.__WINDOW_TYPE__ = desktop_types_1.DesktopWindowType.MAIN;
 console.info('App Logs: ', desktop_bridge_1.bridge.logsPath);
-//# sourceMappingURL=main.preload.js.map
\ No newline at end of file
+//# sourceMappingURL=main.preload.js.map
diff -uraN original/moba-desktop/src/windows/main/main.window.js modified/moba-desktop/src/windows/main/main.window.js
--- original/moba-desktop/src/windows/main/main.window.js	2021-11-06 19:29:38.788404653 +0000
+++ modified/moba-desktop/src/windows/main/main.window.js	2021-11-06 19:29:38.818404653 +0000
@@ -75,10 +75,12 @@
             },
             show: false,
             resizable: true,
+            icon: path.join(__dirname, "../../../../../resources/icons/512x512.png"),
             frame: false,
             titleBarStyle: 'hidden',
             maximizable: true,
         });
+        require("@electron/remote/main").enable(mainWindow.webContents);
         appWindowState.manage(mainWindow);
         mainWindow.loadURL(navigation_1.getSafetyWindowURL(url_1.AppPath.ONBOARDING_ROOT));
         navigation_1.initNavigationSecurity(mainWindow);
@@ -241,4 +243,4 @@
     window.loadURL(navigation_1.getSafetyWindowURL(url_1.AppPath.FORCE_DESKTOP_APP_UPDATE));
 }
 exports.redirectToForceUpdatePage = redirectToForceUpdatePage;
-//# sourceMappingURL=main.window.js.map
\ No newline at end of file
+//# sourceMappingURL=main.window.js.map
