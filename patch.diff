diff -raN -U 6 original/moba-desktop/src/app/app.js modified/moba-desktop/src/app/app.js
--- original/moba-desktop/src/app/app.js	2023-03-27 13:46:14.434530790 +0100
+++ modified/moba-desktop/src/app/app.js	2023-03-27 13:46:14.504531246 +0100
@@ -70,13 +70,12 @@
         ipc_protocol_1.init();
         app_internal_webview_1.init();
         valorant_lcu_controller_1.init();
         main_utils_1.showOrCreateWindow();
         app_tray_1.init();
         deep_linking_1.addDeepLinkingListeners();
-        setInterval(promo_1.maybeShowSplashScreen, 1000 * 60 * 10);
     }));
     electron_1.app.on('window-all-closed', () => {
     });
     electron_1.app.on('before-quit', () => {
         var _a;
         const lolSettingsFetcher = lol_settings_fetcher_1.LolSettingsFetcher.getInstance();
diff -raN -U 6 original/moba-desktop/src/app/app-tray.js modified/moba-desktop/src/app/app-tray.js
--- original/moba-desktop/src/app/app-tray.js	2023-03-27 13:46:14.434530790 +0100
+++ modified/moba-desktop/src/app/app-tray.js	2023-03-27 13:46:14.504531246 +0100
@@ -23,13 +23,13 @@
 const path = __importStar(require("path"));
 const electron_1 = require("electron");
 const paths_1 = require("../paths");
 const environment_1 = require("../utils/environment");
 const app_utils_1 = require("./app-utils");
 const main_utils_1 = require("../windows/main/main.utils");
-const iconName = environment_1.isWin ? 'tray-icon-win.ico' : 'tray-icon-mac.png';
+const iconName = environment_1.isWin ? 'tray-icon-win.ico' : (environment_1.isLinux ? 'icon.png' : 'tray-icon-mac.png');
 const trayIcon = path.resolve(paths_1.RESOURCES_PATH, iconName);
 let tray = null;
 function init() {
     if (!tray) {
         tray = new electron_1.Tray(trayIcon);
         const contextMenu = electron_1.Menu.buildFromTemplate([
diff -raN -U 6 original/moba-desktop/src/app/deep-linking.js modified/moba-desktop/src/app/deep-linking.js
--- original/moba-desktop/src/app/deep-linking.js	2023-03-27 13:46:14.434530790 +0100
+++ modified/moba-desktop/src/app/deep-linking.js	2023-03-27 13:46:14.504531246 +0100
@@ -31,13 +31,13 @@
 const deep_linking_types_1 = require("../../../moba-shared/src/common/types/deep-linking.types");
 const game_overlay_1 = require("../utils/game-overlay/game-overlay");
 const ipc_messages_types_1 = require("../../../moba-shared/src/common/types/desktop/ipc-messages.types");
 const main_utils_1 = require("../windows/main/main.utils");
 function initDeepLinking() {
     electron_1.app.removeAsDefaultProtocolClient(app_config_1.MOBA_PROTOCOL_NAME);
-    if (environment_1.IS_ELECTRON_DEV && environment_1.isWin) {
+    if (process.defaultApp) {
         electron_1.app.setAsDefaultProtocolClient(app_config_1.MOBA_PROTOCOL_NAME, process.execPath, [path.resolve(process.argv[1])]);
     }
     else {
         electron_1.app.setAsDefaultProtocolClient(app_config_1.MOBA_PROTOCOL_NAME);
     }
 }
@@ -48,14 +48,21 @@
             event.preventDefault();
             processDeepLinkingUrl(url);
         }
         logs_1.appUrlsLog.debug(`open-url: ${url}`);
         main_utils_1.showAndRestoreMainWindow();
     });
+    // Check clipboard to see if the request is in the clipboard.
+    electron_1.app.on('browser-window-focus', () => {
+        const text = electron_1.clipboard.readText('clipboard');
+        if (text.startsWith(`${app_config_1.MOBA_PROTOCOL_NAME}:`)) {
+            processDeepLinkingUrl(text);
+        }
+    });
     electron_1.app.on('second-instance', (_e, argv) => {
-        if (environment_1.isWin) {
+        if (environment_1.isWin || environment_1.isLinux) {
             const url = argv.find(it => it.startsWith(`${app_config_1.MOBA_PROTOCOL_NAME}:`));
             url && processDeepLinkingUrl(url);
         }
         logs_1.appUrlsLog.debug('second-instance: ', argv);
         main_utils_1.showAndRestoreMainWindow();
     });
@@ -87,7 +94,7 @@
         }
     }
     else {
         logs_1.appUrlsLog.error('Unknown moba protocol communication url: ', { url });
     }
 }
-//# sourceMappingURL=deep-linking.js.map
\ No newline at end of file
+//# sourceMappingURL=deep-linking.js.map
diff -raN -U 6 original/moba-desktop/src/app/ipc-protocol/ipc-protocol.js modified/moba-desktop/src/app/ipc-protocol/ipc-protocol.js
--- original/moba-desktop/src/app/ipc-protocol/ipc-protocol.js	2023-03-27 13:46:14.437864144 +0100
+++ modified/moba-desktop/src/app/ipc-protocol/ipc-protocol.js	2023-03-27 13:46:14.504531246 +0100
@@ -17,7 +17,7 @@
     lc_emulation_ipc_1.initLcEmulationIpc();
     lol_status_bar_ipc_1.initLolStatusBarIpc();
     app_settings_ipc_1.initAppSettingsIpc();
     post_game_highlights_ipc_1.initPostGameHighlightsIpc();
 }
 exports.init = init;
-//# sourceMappingURL=ipc-protocol.js.map
\ No newline at end of file
+//# sourceMappingURL=ipc-protocol.js.map
diff -raN -U 6 original/moba-desktop/src/auth/auth-flow.js modified/moba-desktop/src/auth/auth-flow.js
--- original/moba-desktop/src/auth/auth-flow.js	2023-03-27 13:46:14.434530790 +0100
+++ modified/moba-desktop/src/auth/auth-flow.js	2023-03-27 13:46:14.504531246 +0100
@@ -57,13 +57,13 @@
     return cookies_1.getAuthFlowData()
         .then(authFlowData => {
         if (authFlowData && authFlowData.verifier && authFlowData.state === state && scope === app_config_1.DESKTOP_AUTH_SCOPE) {
             return authFlowData;
         }
         else {
-            throw Error(`Auth flow data doesn't match: ${code}, ${state}, ${scope}, ${JSON.stringify(authFlowData)}`);
+            throw Error(`Auth flow data doesn't match: ${code}, ${state}, ${scope}, Data: ${JSON.stringify(authFlowData)}`);
         }
     })
         .then(authFlowData => receiveToken(code, authFlowData.verifier, state))
         .then(res => {
         cookies_1.removeAuthFlowData().catch(authorization_error_dialog_1.showAuthorizationError);
         auth_refresh_scheduler_1.startRefreshCycle();
diff -raN -U 6 original/moba-desktop/src/dialogs/authorization-error-dialog.js modified/moba-desktop/src/dialogs/authorization-error-dialog.js
--- original/moba-desktop/src/dialogs/authorization-error-dialog.js	2023-03-27 13:46:14.434530790 +0100
+++ modified/moba-desktop/src/dialogs/authorization-error-dialog.js	2023-03-27 13:46:14.504531246 +0100
@@ -20,13 +20,13 @@
 };
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.showAuthorizationError = void 0;
 const Sentry = __importStar(require("@sentry/browser"));
 const logs_1 = require("../utils/logs");
 function showAuthorizationError(e) {
-    const dialog = require('@electron/remote').dialog;
+    const dialog = require('@electron/remote/main').dialog;
     if (dialog) {
         dialog
             .showMessageBox({
             type: 'error',
             title: 'Authorization Error',
             message: 'Authorization Error',
@@ -40,11 +40,12 @@
                 Sentry.captureException(e);
                 alert('Thank you for your patience, already investigating... Sorry for inconvenience.');
             }
         });
     }
     else {
+        console.log(e);
         logs_1.authLog.error('Unable to show authorization error: ', { e });
     }
 }
 exports.showAuthorizationError = showAuthorizationError;
 //# sourceMappingURL=authorization-error-dialog.js.map
\ No newline at end of file
diff -raN -U 6 original/moba-desktop/src/dialogs/select-folder-dialog.js modified/moba-desktop/src/dialogs/select-folder-dialog.js
--- original/moba-desktop/src/dialogs/select-folder-dialog.js	2023-03-27 13:46:14.434530790 +0100
+++ modified/moba-desktop/src/dialogs/select-folder-dialog.js	2023-03-27 13:46:14.504531246 +0100
@@ -8,13 +8,13 @@
         step((generator = generator.apply(thisArg, _arguments || [])).next());
     });
 };
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.showSelectFolderDialog = void 0;
 const ipc_messages_types_1 = require("../../../moba-shared/src/common/types/desktop/ipc-messages.types");
-const remote_1 = require("@electron/remote");
+const remote_1 = require("@electron/remote/main");
 const ipc_renderer_1 = require("../utils/ipc-renderer");
 function showSelectFolderDialog(window) {
     if (remote_1.dialog) {
         return remote_1.dialog
             .showOpenDialog(window, {
             title: 'Choose a folder to store video highlights',
diff -raN -U 6 original/moba-desktop/src/dialogs/select-game-folder-dialog.js modified/moba-desktop/src/dialogs/select-game-folder-dialog.js
--- original/moba-desktop/src/dialogs/select-game-folder-dialog.js	2023-03-27 13:46:14.434530790 +0100
+++ modified/moba-desktop/src/dialogs/select-game-folder-dialog.js	2023-03-27 13:46:14.504531246 +0100
@@ -8,27 +8,50 @@
         step((generator = generator.apply(thisArg, _arguments || [])).next());
     });
 };
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.showSelectLolClientFolderDialog = void 0;
 const ipc_messages_types_1 = require("../../../moba-shared/src/common/types/desktop/ipc-messages.types");
-const remote_1 = require("@electron/remote");
+const remote_1 = require("@electron/remote/main");
+const prompt = require('electron-prompt');
 const ipc_renderer_1 = require("../utils/ipc-renderer");
 function showSelectLolClientFolderDialog(window) {
     if (remote_1.dialog) {
         return remote_1.dialog
             .showOpenDialog(window, {
-            title: 'Choose the LoL installation path. e.g C:\\Riot Games\\League of Legends',
-            message: 'Choose the LoL installation path. e.g /Applications/League of Legends.app/',
+            title: 'Choose the LoL installation path. e.g $WINEPREFIX/drive_c/Riot Games/League of Legends',
+            message: 'Choose the LoL installation path. e.g $WINEPREFIX/drive_c/Riot Games/League of Legends/',
             buttonLabel: 'Select Directory',
             properties: ['openDirectory', 'treatPackageAsDirectory', 'showHiddenFiles'],
-        })
-            .then((result) => __awaiter(this, void 0, void 0, function* () {
+              }).then(result => {
+              return new Promise((res, rej) => {
+                          if(result.canceled) {
+                                      prompt({
+                                                  title: 'Enter the LoL installation path',
+                                                  label: 'Path must be exact',
+                                                  value: '$WINEPREFIX/drive_c/Riot Games/League of Legends/',
+                                                  inputAttrs: {
+                                                      type: 'text'
+                                                  },
+                                          type: 'input'
+                                      }, window).then((r) => {
+                                                  if(r === null) {
+                                                              res(result);
+                                                          } else {
+                                                              res({filePaths:[r]});
+                                                          }
+                                              });
+                                  } else {
+                                      res(result);
+                                  }
+                          })
+                  }).then((result) => __awaiter(this, void 0, void 0, function* () {
             if (!result.canceled) {
                 const folder = result.filePaths ? result.filePaths[0] : null;
                 const setupResult = yield ipc_renderer_1.ipcRendererInvoke(ipc_messages_types_1.IPC_MESSAGE.SET_GAME_FOLDER_PATH, folder);
+                alert("Folder set to: " + JSON.stringify(result) + setupResult);
                 if (!setupResult) {
                     alert('Invalid game folder, please, try again.');
                     return null;
                 }
                 return folder;
             }
@@ -43,7 +66,7 @@
     else {
         console.error('Unable to show select folder, please try later or contact support');
         return Promise.resolve(null);
     }
 }
 exports.showSelectLolClientFolderDialog = showSelectLolClientFolderDialog;
-//# sourceMappingURL=select-game-folder-dialog.js.map
\ No newline at end of file
+//# sourceMappingURL=select-game-folder-dialog.js.map
diff -raN -U 6 original/moba-desktop/src/dialogs/show-file-dialog.js modified/moba-desktop/src/dialogs/show-file-dialog.js
--- original/moba-desktop/src/dialogs/show-file-dialog.js	2023-03-27 13:46:14.434530790 +0100
+++ modified/moba-desktop/src/dialogs/show-file-dialog.js	2023-03-27 13:46:14.504531246 +0100
@@ -1,9 +1,9 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.showFileDialog = void 0;
-const remote_1 = require("@electron/remote");
+const remote_1 = require("@electron/remote/main");
 function showFileDialog(filePath) {
     remote_1.shell.showItemInFolder(filePath);
 }
 exports.showFileDialog = showFileDialog;
 //# sourceMappingURL=show-file-dialog.js.map
\ No newline at end of file
diff -raN -U 6 original/moba-desktop/src/lol/utils/in-game-imports/in-game-items-import.js modified/moba-desktop/src/lol/utils/in-game-imports/in-game-items-import.js
--- original/moba-desktop/src/lol/utils/in-game-imports/in-game-items-import.js	2023-03-27 13:46:14.387863819 +0100
+++ modified/moba-desktop/src/lol/utils/in-game-imports/in-game-items-import.js	2023-03-27 13:46:14.507864600 +0100
@@ -41,13 +41,13 @@
 function importLolGameItems(gameItemsData) {
     return __awaiter(this, void 0, void 0, function* () {
         try {
             if (!gameItemsData.blocks.length)
                 return in_game_imports_types_1.LcuGameItemsImportStatus.EMPTY_BLOCKS_LIST;
             const processGamePath = yield lcu_connection_1.getLCUPathFromProcess();
-            const gamePath = processGamePath || root_store_1.getAppSettings().getGameFolderPath();
+            const gamePath = (environment_1.isLinux ? null : processGamePath) || root_store_1.getAppSettings().getGameFolderPath();
             if (!gamePath)
                 return in_game_imports_types_1.LcuGameItemsImportStatus.GAME_PATH_NOT_FOUND;
             const filePath = path_1.default.join(gamePath, 'Config', 'Global', 'Recommended', '!mobalytics.json');
             yield fse.ensureFile(filePath);
             const blocks = gameItemsData.blocks.map(it => (Object.assign(Object.assign({}, it), { recMath: false, minSummonerLevel: -1, maxSummonerLevel: -1, showIfSummonerSpell: '', hideIfSummonerSpell: '' })));
             const content = {
@@ -67,7 +67,7 @@
             logs_1.lcuGeneralLog.error('Unable to import game items, error:', { error, gameItemsData });
             return in_game_imports_types_1.LcuGameItemsImportStatus.INTERNAL_ERROR;
         }
     });
 }
 exports.importLolGameItems = importLolGameItems;
-//# sourceMappingURL=in-game-items-import.js.map
\ No newline at end of file
+//# sourceMappingURL=in-game-items-import.js.map
diff -raN -U 6 original/moba-desktop/src/main.js modified/moba-desktop/src/main.js
--- original/moba-desktop/src/main.js	2023-03-27 13:46:14.381197108 +0100
+++ modified/moba-desktop/src/main.js	2023-03-27 13:46:14.507864600 +0100
@@ -6,7 +6,17 @@
 require("../../moba-web/src/common/types/global.types");
 require("../../moba-web/src/common/utils/request-idle-polyfill");
 const MakePromisesSafe = require('make-promises-safe');
 MakePromisesSafe.logError = (err) => logs_1.generalLog.error('Uncaught promise exception error: ', err);
 const gotTheLock = electron_1.app.requestSingleInstanceLock();
 gotTheLock ? app_1.runApp() : electron_1.app.quit();
-//# sourceMappingURL=main.js.map
\ No newline at end of file
+//# sourceMappingURL=main.js.map
+process
+    .on('unhandledRejection', (reason, p) => {
+        electron_1.dialog.showMessageBoxSync(null, {title: "Uncaught Error", message: `Uncaught issue: ${reason}`});
+        console.error(reason, 'Unhandled Rejection at Promise', p);
+    })
+    .on('uncaughtException', err => {
+        electron_1.dialog.showMessageBoxSync(null, {title: "Uncaught Error", message: `Uncaught issue: ${JSON.stringify(err)}`});
+        console.error(err, 'Uncaught Exception thrown');
+        process.exit(1);
+    });
diff -raN -U 6 original/moba-desktop/src/utils/app-settings.js modified/moba-desktop/src/utils/app-settings.js
--- original/moba-desktop/src/utils/app-settings.js	2023-03-27 13:46:14.381197108 +0100
+++ modified/moba-desktop/src/utils/app-settings.js	2023-03-27 13:46:14.507864600 +0100
@@ -10,21 +10,21 @@
 const logs_1 = require("./logs");
 const environment_1 = require("./environment");
 const clone_deep_1 = __importDefault(require("clone-deep"));
 const object_1 = require("../../../moba-web/src/common/utils/object");
 const es6_1 = __importDefault(require("fast-deep-equal/es6"));
 function getLegacyLoginItemSettings() {
-    return environment_1.IS_ELECTRON_DEV ? null : electron_1.app.getLoginItemSettings({ path: process.execPath });
+    return electron_1.app.getLoginItemSettings({ path: process.execPath });
 }
 exports.getLegacyLoginItemSettings = getLegacyLoginItemSettings;
 function getLoginItemSettings() {
-    return environment_1.IS_ELECTRON_DEV ? null : electron_1.app.getLoginItemSettings({ path: environment_1.AppExecPath });
+    return electron_1.app.getLoginItemSettings({ path: environment_1.AppExecPath });
 }
 exports.getLoginItemSettings = getLoginItemSettings;
 function setLoginItemSettings(settings) {
-    !environment_1.IS_ELECTRON_DEV && electron_1.app.setLoginItemSettings(Object.assign(Object.assign({}, settings), { path: environment_1.AppExecPath }));
+    electron_1.app.setLoginItemSettings(Object.assign(Object.assign({}, settings), { path: environment_1.AppExecPath }));
 }
 exports.setLoginItemSettings = setLoginItemSettings;
 function filterDefaultSettings(settings, exceptions) {
     const resultSettings = clone_deep_1.default(settings);
     object_1.objectKeys(settings).forEach(key => {
         if (es6_1.default(settings_types_1.DesktopSettingsDefaultValues[key], settings[key]) ||
diff -raN -U 6 original/moba-desktop/src/utils/createLogger.js modified/moba-desktop/src/utils/createLogger.js
--- original/moba-desktop/src/utils/createLogger.js	2023-03-27 13:46:14.381197108 +0100
+++ modified/moba-desktop/src/utils/createLogger.js	2023-03-27 13:46:14.507864600 +0100
@@ -49,13 +49,13 @@
 });
 const consoleLogsFormat = winston.format.combine(winston.format.colorize(), winston.format.timestamp(), winston.format.align(), winston.format.splat(), winston.format.prettyPrint({ colorize: true }), printFn);
 const fileLogsFormat = winston.format.combine(winston.format.timestamp(), winston.format.align(), winston.format.splat(), winston.format.prettyPrint(), printFn);
 function createLogger({ name, level = app_config_1.DESKTOP_LOGGER_LEVEL, maxSize = '20mb' }) {
     const transports = [];
     const dirname = electron_1.app === null || electron_1.app === void 0 ? void 0 : electron_1.app.getPath('logs');
-    const normalizedLevel = enums_1.isStrEnumValue(logger_1.LogLevel, level) ? level : logger_1.LogLevel.debug;
+    const normalizedLevel = !environment_1.IS_ELECTRON_DEV ? level : logger_1.LogLevel.debug;
     if (dirname) {
         transports.push(new winston.transports.DailyRotateFile({
             dirname,
             filename: `moba-${name}-log-%DATE%.log`,
             datePattern: 'YYYY-MM-DD',
             maxSize,
diff -raN -U 6 original/moba-desktop/src/utils/desktop-bridge.js modified/moba-desktop/src/utils/desktop-bridge.js
--- original/moba-desktop/src/utils/desktop-bridge.js	2023-03-27 13:46:14.381197108 +0100
+++ modified/moba-desktop/src/utils/desktop-bridge.js	2023-03-27 13:46:14.507864600 +0100
@@ -19,24 +19,25 @@
     return result;
 };
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.bridge = void 0;
 const os = __importStar(require("os"));
 const path = __importStar(require("path"));
-const remote_1 = require("@electron/remote");
+const remote_1 = require("@electron/remote/main");
 const select_game_folder_dialog_1 = require("../dialogs/select-game-folder-dialog");
 const ipc_renderer_1 = require("./ipc-renderer");
 const select_folder_dialog_1 = require("../dialogs/select-folder-dialog");
 const show_file_dialog_1 = require("../dialogs/show-file-dialog");
 const version_const_1 = require("./version.const");
 const platform = os.platform();
 exports.bridge = {
     version: remote_1.app.getVersion() === '0.0.1' ? version_const_1.DEV_DESKTOP_APP_VERSION : remote_1.app.getVersion(),
     platform,
-    isWin: platform !== 'darwin',
+    isWin: platform === 'win32',
     isMac: platform === 'darwin',
+    isLinux: platform === 'linux',
     logsPath: path.resolve(remote_1.app.getPath('logs')),
     settings: null,
     settingsV2: null,
     logsService: null,
     ipcRendererSend: ipc_renderer_1.ipcRendererSend,
     ipcRendererOn: ipc_renderer_1.ipcRendererOn,
diff -raN -U 6 original/moba-desktop/src/utils/environment.js modified/moba-desktop/src/utils/environment.js
--- original/moba-desktop/src/utils/environment.js	2023-03-27 13:46:14.381197108 +0100
+++ modified/moba-desktop/src/utils/environment.js	2023-03-27 13:46:14.507864600 +0100
@@ -21,18 +21,19 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.AppExecPath = exports.LolLogsSubPath = exports.RiotClientName = exports.RiotClientNameMac = exports.RiotClientNameWin = exports.LolProcessName = exports.LoLProcessNameMac = exports.LoLProcessNameWin = exports.IS_ELECTRON_DEV = exports.IS_JEST_TESTING = exports.isX64 = exports.isWin = exports.isOsX = exports.APP_USER_MODEL_ID = void 0;
 const path = __importStar(require("path"));
 exports.APP_USER_MODEL_ID = 'MobalyticsHQ.DesktopApp';
 exports.isOsX = process.platform === 'darwin';
 exports.isWin = process.platform === 'win32';
+exports.isLinux = process.platform === 'linux';
 exports.isX64 = process.arch === 'x64';
 exports.IS_JEST_TESTING = process.env.JEST_WORKER_ID !== undefined;
 exports.IS_ELECTRON_DEV = require('electron-is-dev');
 exports.LoLProcessNameWin = 'LeagueClient.exe';
 exports.LoLProcessNameMac = 'LeagueClient.app';
 exports.LolProcessName = exports.isWin ? exports.LoLProcessNameWin : exports.LoLProcessNameMac;
 exports.RiotClientNameWin = 'RiotClientServices.exe';
 exports.RiotClientNameMac = '';
-exports.RiotClientName = exports.isWin ? exports.RiotClientNameWin : exports.RiotClientNameMac;
+exports.RiotClientName = (exports.isWin || exports.isLinux) ? exports.RiotClientNameWin : exports.RiotClientNameMac;
 exports.LolLogsSubPath = path.join('Logs', 'GameLogs');
 exports.AppExecPath = `"${path.normalize(path.resolve(process.execPath))}"`;
 //# sourceMappingURL=environment.js.map
\ No newline at end of file
diff -raN -U 6 original/moba-desktop/src/utils/game-overlay/game-overlay-window.js modified/moba-desktop/src/utils/game-overlay/game-overlay-window.js
--- original/moba-desktop/src/utils/game-overlay/game-overlay-window.js	2023-03-27 13:46:14.381197108 +0100
+++ modified/moba-desktop/src/utils/game-overlay/game-overlay-window.js	2023-03-27 13:46:14.507864600 +0100
@@ -1,10 +1,10 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.onOverlayWindowContentLoaded = void 0;
-const remote_1 = require("@electron/remote");
+const remote_1 = require("@electron/remote/main");
 const isOverlayPage = (content) => {
     return /mobalytics-in-game-overlay-marker/gim.test(content);
 };
 const onOverlayWindowContentLoaded = () => {
     const pageHtml = window.document.documentElement.innerHTML;
     if (!isOverlayPage(pageHtml)) {
diff -raN -U 6 original/moba-desktop/src/utils/lcu-connection.js modified/moba-desktop/src/utils/lcu-connection.js
--- original/moba-desktop/src/utils/lcu-connection.js	2023-03-27 13:46:14.381197108 +0100
+++ modified/moba-desktop/src/utils/lcu-connection.js	2023-03-27 13:46:14.507864600 +0100
@@ -121,7 +121,7 @@
         catch (e) {
             return false;
         }
     });
 }
 exports.isValidLCUPath = isValidLCUPath;
-//# sourceMappingURL=lcu-connection.js.map
\ No newline at end of file
+//# sourceMappingURL=lcu-connection.js.map
diff -raN -U 6 original/moba-desktop/src/utils/navigation.js modified/moba-desktop/src/utils/navigation.js
--- original/moba-desktop/src/utils/navigation.js	2023-03-27 13:46:14.381197108 +0100
+++ modified/moba-desktop/src/utils/navigation.js	2023-03-27 13:46:14.507864600 +0100
@@ -31,13 +31,13 @@
         event.preventDefault();
         electron_1.shell.openExternal(url);
     });
 }
 exports.initNavigationSecurity = initNavigationSecurity;
 function getSafetyWindowURL(path) {
-    const url = new URL(path || '', environment_1.IS_ELECTRON_DEV ? `https://localhost.mobalytics.gg:3000` : `https://${app_config_1.APP_DOMAIN}`)
+    const url = new URL(path || '', `https://${app_config_1.APP_DOMAIN}`)
         .href;
     logs_1.generalLog.debug('safety window url utils: ', { url });
     return url;
 }
 exports.getSafetyWindowURL = getSafetyWindowURL;
 //# sourceMappingURL=navigation.js.map
\ No newline at end of file
diff -raN -U 6 original/moba-desktop/src/windows/about/about.preload.js modified/moba-desktop/src/windows/about/about.preload.js
--- original/moba-desktop/src/windows/about/about.preload.js	2023-03-27 13:46:14.381197108 +0100
+++ modified/moba-desktop/src/windows/about/about.preload.js	2023-03-27 13:46:14.507864600 +0100
@@ -17,13 +17,13 @@
     if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
     __setModuleDefault(result, mod);
     return result;
 };
 Object.defineProperty(exports, "__esModule", { value: true });
 const os = __importStar(require("os"));
-const remote_1 = require("@electron/remote");
+const remote_1 = require("@electron/remote/main");
 const app_config_1 = require("../../../../moba-web/src/app.config");
 const ipc_renderer_1 = require("../../utils/ipc-renderer");
 const version_const_1 = require("../../utils/version.const");
 const state = {
     version: remote_1.app.getVersion() === '0.0.1' ? version_const_1.DEV_DESKTOP_APP_VERSION : remote_1.app.getVersion(),
     stage: app_config_1.APP_STAGE === 'production' ? null : app_config_1.APP_DOMAIN,
diff -raN -U 6 original/moba-desktop/src/windows/about/about.window.js modified/moba-desktop/src/windows/about/about.window.js
--- original/moba-desktop/src/windows/about/about.window.js	2023-03-27 13:46:14.381197108 +0100
+++ modified/moba-desktop/src/windows/about/about.window.js	2023-03-27 13:46:14.507864600 +0100
@@ -41,12 +41,13 @@
             webPreferences: {
                 preload: path.join(__dirname, 'about.preload.js'),
                 nodeIntegration: false,
                 contextIsolation: false,
                 webSecurity: true,
                 allowRunningInsecureContent: false,
+                enableRemoteModule: true,
                 experimentalFeatures: false,
                 autoplayPolicy: 'user-gesture-required',
             },
         });
         remote.enable(aboutWindow.webContents);
         navigation_1.initNavigationSecurity(aboutWindow);
@@ -60,7 +61,7 @@
     }
 }
 function toggleAboutWindow() {
     aboutWindow ? (aboutWindow.isVisible() ? aboutWindow.hide() : aboutWindow.show()) : createAboutWindow();
 }
 exports.toggleAboutWindow = toggleAboutWindow;
-//# sourceMappingURL=about.window.js.map
\ No newline at end of file
+//# sourceMappingURL=about.window.js.map
diff -raN -U 6 original/moba-desktop/src/windows/game-overlay/game-overlay.window.js modified/moba-desktop/src/windows/game-overlay/game-overlay.window.js
--- original/moba-desktop/src/windows/game-overlay/game-overlay.window.js	2023-03-27 13:46:14.381197108 +0100
+++ modified/moba-desktop/src/windows/game-overlay/game-overlay.window.js	2023-03-27 13:46:14.507864600 +0100
@@ -47,12 +47,13 @@
         enableLargerThanScreen: true,
         webPreferences: {
             offscreen: isOffscreenMode,
             preload: path.join(__dirname, 'game-overlay.preload.js'),
             nodeIntegration: false,
             contextIsolation: false,
+            enableRemoteModule: true,
             webSecurity: true,
             allowRunningInsecureContent: false,
             experimentalFeatures: false,
             autoplayPolicy: 'user-gesture-required',
         },
     });
diff -raN -U 6 original/moba-desktop/src/windows/main/main.window.js modified/moba-desktop/src/windows/main/main.window.js
--- original/moba-desktop/src/windows/main/main.window.js	2023-03-27 13:46:14.381197108 +0100
+++ modified/moba-desktop/src/windows/main/main.window.js	2023-03-27 13:46:14.507864600 +0100
@@ -31,12 +31,13 @@
 const navigation_1 = require("../../utils/navigation");
 const window_unresponsive_dialog_1 = require("../../dialogs/window-unresponsive-dialog");
 const remote = __importStar(require("@electron/remote/main"));
 const root_store_1 = require("../../common/store/root-store");
 const lang_1 = require("../../../../moba-shared/src/common/types/lang");
 const url_1 = require("../../../../moba-shared/src/common/types/url");
+const environment_1 = require("../../utils/environment");
 let mainWindow;
 let appWindowState;
 function getMainWindowState() {
     return appWindowState;
 }
 exports.getMainWindowState = getMainWindowState;
@@ -70,17 +71,19 @@
             webPreferences: {
                 preload: path.join(__dirname, 'main.preload.js'),
                 nodeIntegration: false,
                 contextIsolation: false,
                 webSecurity: true,
                 allowRunningInsecureContent: false,
+                enableRemoteModule: true,
                 experimentalFeatures: false,
                 autoplayPolicy: 'user-gesture-required',
             },
             show: false,
             resizable: true,
+            icon: path.join(__dirname, "../../../../../resources/icons/512x512.png"),
             frame: false,
             titleBarStyle: 'hidden',
             maximizable: true,
         });
         appWindowState.manage(mainWindow);
         remote.enable(mainWindow.webContents);
@@ -89,12 +92,14 @@
         mainWindow.on('ready-to-show', () => {
             if (mainWindow) {
                 mainWindow.show();
                 mainWindow.focus();
             }
         });
+        console.log("Is Dev", environment_1.IS_ELECTRON_DEV);
+        if(environment_1.IS_ELECTRON_DEV) mainWindow.webContents.openDevTools({ mode: 'detach' });
         mainWindow.on('unresponsive', () => {
             logs_1.generalLog.error('main window is unresponsive');
             window_unresponsive_dialog_1.showUnresponsiveMainWindowDialog();
         });
         mainWindow.on('responsive', function () {
             logs_1.generalLog.info('main window becomes responsive');
